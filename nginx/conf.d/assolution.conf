# Configuration Nginx pour Assolution - Production
# HTTP Server (prêt pour HTTPS)

server {
    listen 80;
    server_name localhost 192.168.1.22;
    
    # Redirection HTTPS (à décommenter quand SSL sera configuré)
    # return 301 https://$server_name$request_uri;

    # Logs spécifiques au site
    access_log /var/log/nginx/assolution_access.log main;
    error_log /var/log/nginx/assolution_error.log warn;

    # ==========================================
    # HEALTH CHECKS & MONITORING
    # ==========================================
    
    # Health check Nginx (pas de rate limit)
    location /nginx-health {
        access_log off;
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
    }

    # Health check global (via backend)
    location /health {
        access_log off;
        proxy_pass http://backend/api/actuator/health;
        proxy_set_header Host $host;
        proxy_connect_timeout 5s;
        proxy_read_timeout 5s;
    }

    # ==========================================
    # API BACKEND ROUTES
    # ==========================================
    
    # Authentication endpoints (très strict)
    location /api/auth/ {
        limit_req zone=login burst=10 nodelay;
        limit_req_status 429;
        
        # Headers pour l'API
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # Proxy vers le backend via upstream
        proxy_pass http://backend;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Timeouts pour auth
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Headers de sécurité pour auth
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
    }

    # API générale
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
        
        # Headers pour l'API
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # Proxy vers le backend via upstream
        proxy_pass http://backend;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Timeouts pour API
        proxy_connect_timeout 15s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Support WebSockets (si nécessaire)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Buffer pour les grosses réponses
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Actuator endpoints (accès restreint)
    location /api/actuator/ {
        # Accès limité aux IPs locales et containers
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 172.16.0.0/12;
        allow 10.0.0.0/8;
        deny all;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Timeouts courts pour monitoring
        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;
    }

    # ==========================================
    # ASSETS STATIQUES BACKEND (si nécessaire)
    # ==========================================
    
    location /api/static/ {
        limit_req zone=static burst=50 nodelay;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        
        # Cache côté navigateur
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Cache côté proxy (optionnel)
        proxy_cache static_cache;
        proxy_cache_valid 200 1h;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    }

    # ==========================================
    # FRONTEND ANGULAR
    # ==========================================
    
    # Assets statiques du frontend - SERVIES DIRECTEMENT
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
        limit_req zone=static burst=100 nodelay;
        
        # Servir directement depuis le système de fichiers
        root /usr/share/nginx/html;
        
        # Cache agressif pour les assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Gestion des erreurs 404 pour assets
        try_files $uri =404;
        
        # Compression spécifique
        gzip_static on;
    }

    # Routes Angular SPA - SERVIES DIRECTEMENT (pas de proxy)
    location / {
        limit_req zone=general burst=30 nodelay;
        
        # Servir les fichiers statiques directement
        root /usr/share/nginx/html;
        index index.html;
        
        # SPA routing - toutes les routes vers index.html
        try_files $uri $uri/ /index.html;
        
        # Pas de cache pour index.html
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        # Headers de sécurité
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }

    # ==========================================
    # GESTION DES ERREURS
    # ==========================================
    
    # Pages d'erreur personnalisées
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    error_page 429 /429.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /429.html {
        root /usr/share/nginx/html;
        return 429 "Rate limit exceeded. Please try again later.\n";
        add_header Content-Type text/plain;
        internal;
    }
}

# ==========================================
# CONFIGURATION HTTPS (prête à activer)
# ==========================================

# Décommentez cette section quand vous aurez vos certificats SSL
# server {
#     listen 443 ssl http2;
#     server_name localhost 192.168.1.22;
# 
#     # Certificats SSL
#     ssl_certificate /etc/nginx/ssl/assolution.crt;
#     ssl_certificate_key /etc/nginx/ssl/assolution.key;
# 
#     # Configuration SSL moderne
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_stapling on;
#     ssl_stapling_verify on;
# 
#     # Headers de sécurité HTTPS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
#     add_header X-Frame-Options SAMEORIGIN always;
#     add_header X-Content-Type-Options nosniff always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
# 
#     # Copier toutes les locations du serveur HTTP ici quand HTTPS sera activé
# }

# Variable pour WebSocket upgrade
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}