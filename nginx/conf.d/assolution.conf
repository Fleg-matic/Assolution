events {
    worker_connections 2048;  # ✅ OPTIMISÉ: Doublé de 1024 à 2048
    # ✅ NOUVELLES OPTIMISATIONS:
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # ✅ OPTIMISATIONS RÉSEAU AJOUTÉES
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    keepalive_requests 1000;
    
    # ✅ BUFFERS OPTIMISÉS (NOUVEAUX)
    client_body_buffer_size 128k;
    client_max_body_size 20m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # ✅ TIMEOUTS OPTIMISÉS (NOUVEAUX)
    client_header_timeout 30s;
    client_body_timeout 30s;
    send_timeout 30s;

    # ==========================================
    # RATE LIMITING ZONES (CONSERVÉ IDENTIQUE)
    # ==========================================
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

    # ==========================================
    # UPSTREAM BACKEND (OPTIMISÉ)
    # ==========================================
    upstream backend {
        server backend:8080 max_fails=3 fail_timeout=30s;  # ✅ OPTIMISÉ: Ajout max_fails
        keepalive 32;  # ✅ OPTIMISÉ: Connexions keepalive
    }

    # ==========================================
    # LOGGING (OPTIMISÉ)
    # ==========================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';  # ✅ OPTIMISÉ: Ajout métriques timing

    # ==========================================
    # COMPRESSION (OPTIMISÉ)
    # ==========================================
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;  # ✅ OPTIMISÉ: Niveau compression ajusté
    gzip_proxied any;   # ✅ OPTIMISÉ: Compression pour proxies
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/javascript application/json
               application/xml+rss application/atom+xml image/svg+xml;  # ✅ OPTIMISÉ: Plus de types

    # ==========================================
    # CACHE CONFIGURATION (OPTIMISÉ)
    # ==========================================
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:10m max_size=100m inactive=1h use_temp_path=off;
    # ✅ NOUVEAU CACHE pour API
    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=api_cache:10m max_size=50m inactive=30m use_temp_path=off;

    # ==========================================
    # WEBSOCKET UPGRADE MAP (CONSERVÉ)
    # ==========================================
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # ==========================================
    # MAIN SERVER CONFIGURATION
    # ==========================================
    server {
        listen 80;
        server_name localhost 192.168.1.22;
        
        # Redirection HTTPS (à décommenter quand SSL sera configuré)
        # return 301 https://$server_name$request_uri;

        # Logs spécifiques au site (OPTIMISÉ)
        access_log /var/log/nginx/assolution_access.log main buffer=16k flush=5s;  # ✅ OPTIMISÉ: Buffer logs
        error_log /var/log/nginx/assolution_error.log warn;

        # ==========================================
        # HEALTH CHECKS & MONITORING (CONSERVÉ + OPTIMISÉ)
        # ==========================================
        
        # Health check Nginx (pas de rate limit)
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Health check global (via backend) - OPTIMISÉ
        location /health {
            access_log off;
            proxy_pass http://backend/actuator/health;  # ✅ OPTIMISÉ: Direct vers actuator
            proxy_set_header Host $host;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            # ✅ OPTIMISÉ: Headers keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # ==========================================
        # API BACKEND ROUTES (CONSERVÉ + OPTIMISÉ)
        # ==========================================
        
        # Authentication endpoints (très strict) - OPTIMISÉ
        location /api/auth/ {
            limit_req zone=login burst=10 nodelay;
            limit_req_status 429;
            
            # Headers pour l'API
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Proxy vers le backend via upstream (OPTIMISÉ)
            proxy_pass http://backend/api/auth/;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # ✅ OPTIMISÉ: Timeouts plus rapides pour auth
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
            
            # ✅ OPTIMISÉ: Buffers pour auth
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Headers de sécurité pour auth
            add_header X-Content-Type-Options nosniff always;
            add_header X-Frame-Options DENY always;
        }

        # API générale - OPTIMISÉ
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;
            
            # Headers pour l'API
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Proxy vers le backend via upstream (OPTIMISÉ)
            proxy_pass http://backend/api/;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # ✅ OPTIMISÉ: Timeouts ajustés
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Support WebSockets (si nécessaire)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # ✅ OPTIMISÉ: Buffers plus grands
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
            proxy_busy_buffers_size 16k;
            
            # ✅ NOUVEAU: Cache pour certaines réponses API
            location ~* /api/(config|public)/ {
                proxy_pass http://backend;
                proxy_cache api_cache;
                proxy_cache_valid 200 5m;
                proxy_cache_key "$scheme$request_method$host$request_uri";
                add_header X-Cache-Status $upstream_cache_status;
                
                # Mêmes headers que parent
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
            }
        }

        # Actuator endpoints (accès restreint) - OPTIMISÉ
        location /api/actuator/ {
            # Accès limité aux IPs locales et containers
            allow 127.0.0.1;
            allow 192.168.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;
            
            proxy_pass http://backend/api/actuator/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # ✅ OPTIMISÉ: Timeouts encore plus courts + keepalive
            proxy_connect_timeout 3s;
            proxy_read_timeout 5s;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # ✅ OPTIMISÉ: Pas de buffer pour monitoring
            proxy_buffering off;
        }

        # ==========================================
        # ASSETS STATIQUES BACKEND (OPTIMISÉ)
        # ==========================================
        
        location /api/static/ {
            limit_req zone=static burst=50 nodelay;
            
            proxy_pass http://backend/api/static/;
            proxy_set_header Host $host;
            
            # Cache côté navigateur
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # ✅ OPTIMISÉ: Cache côté proxy amélioré
            proxy_cache static_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
        }

        # ==========================================
        # FRONTEND ANGULAR (CONSERVÉ + OPTIMISÉ)
        # ==========================================
        
        # Assets statiques du frontend - OPTIMISÉ
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
            limit_req zone=static burst=100 nodelay;
            
            # Servir directement depuis le système de fichiers
            root /usr/share/nginx/html;
            
            # ✅ OPTIMISÉ: Cache encore plus agressif
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Gestion des erreurs 404 pour assets
            try_files $uri =404;
            
            # ✅ OPTIMISÉ: Compression statique + ETag
            gzip_static on;
            etag on;
            
            # ✅ OPTIMISÉ: Headers performance
            add_header X-Content-Type-Options nosniff;
            tcp_nodelay on;
        }

        # Routes Angular SPA - OPTIMISÉ
        location / {
            limit_req zone=general burst=30 nodelay;
            
            # Servir les fichiers statiques directement
            root /usr/share/nginx/html;
            index index.html;
            
            # SPA routing - toutes les routes vers index.html
            try_files $uri $uri/ /index.html;
            
            # ✅ OPTIMISÉ: Pas de cache pour index.html + headers performance
            location = /index.html {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
                
                # ✅ OPTIMISÉ: ETag pour détection changements
                etag on;
                tcp_nodelay on;
            }
            
            # Headers de sécurité (CONSERVÉS)
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
        }

        # ==========================================
        # GESTION DES ERREURS (CONSERVÉ)
        # ==========================================
        
        # Pages d'erreur personnalisées
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        error_page 429 /429.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /429.html {
            root /usr/share/nginx/html;
            return 429 "Rate limit exceeded. Please try again later.\n";
            add_header Content-Type text/plain;
            internal;
        }
    }

    # ==========================================
    # CONFIGURATION HTTPS (CONSERVÉE + OPTIMISÉE)
    # ==========================================

    # Décommentez cette section quand vous aurez vos certificats SSL
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost 192.168.1.22;
    # 
    #     # Certificats SSL
    #     ssl_certificate /etc/nginx/ssl/assolution.crt;
    #     ssl_certificate_key /etc/nginx/ssl/assolution.key;
    # 
    #     # ✅ OPTIMISÉ: Configuration SSL moderne améliorée
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:50m;  # ✅ OPTIMISÉ: Cache SSL plus grand
    #     ssl_session_timeout 1d;           # ✅ OPTIMISÉ: Timeout plus long
    #     ssl_session_tickets off;          # ✅ OPTIMISÉ: Sécurité
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    # 
    #     # ✅ OPTIMISÉ: Buffer SSL
    #     ssl_buffer_size 1400;
    # 
    #     # Headers de sécurité HTTPS
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #     add_header X-Frame-Options SAMEORIGIN always;
    #     add_header X-Content-Type-Options nosniff always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # 
    #     # Copier toutes les locations du serveur HTTP ici quand HTTPS sera activé
    # }