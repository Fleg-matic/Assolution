services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:17
    container_name: assolution-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-assolution_prod}
      POSTGRES_USER: ${DB_USER:-assolution_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    ports:
      - "5434:5432"
    networks:
      - assolution-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-assolution_user} -d ${DB_NAME:-assolution_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Spring Boot Backend - Production
  backend:
    build:
      context: ./inscriptions/inscriptions-backend
      dockerfile: Dockerfile.prod
    container_name: assolution-backend-prod
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-assolution_prod}
      DB_USER: ${DB_USER:-assolution_user}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      EMAIL_API_KEY: ${EMAIL_API_KEY}
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC"
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-assolution_prod}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-assolution_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    # ❌ SUPPRIMÉ : exposition directe du port
    # ports:
    #   - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - assolution-prod-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'

  # Angular Frontend - Production (conteneur interne)
  frontend:
    build:
      context: ./inscriptions/inscriptions-frontend
      dockerfile: Dockerfile.prod
    container_name: assolution-frontend-prod
    restart: always
    # ❌ SUPPRIMÉ : exposition directe du port
    # ports:
    #   - "4200:80"
    networks:
      - assolution-prod-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Nginx Reverse Proxy - Production (POINT D'ENTRÉE UNIQUE)
  nginx:
    image: nginx:1.25-alpine
    container_name: assolution-nginx-prod
    restart: always
    ports:
      - "80:80"      # ✅ SEUL point d'entrée HTTP
      - "443:443"    # ✅ Prêt pour HTTPS
    networks:
      - assolution-prod-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      # ✅ Création du dossier cache
      - nginx_cache:/var/cache/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

networks:
  assolution-prod-network:
    driver: bridge
    name: assolution-prod-network

volumes:
  postgres_prod_data:
    name: assolution-postgres-prod-data
  # ✅ Volume pour le cache Nginx
  nginx_cache:
    name: assolution-nginx-cache