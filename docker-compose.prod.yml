version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME:-inscriptions_db}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - app-network
    restart: unless-stopped
    # Ne pas exposer le port 5432 en production pour la sécurité

  backend:
    image: ghcr.io/votre-username/moteur-inscriptions-backend:latest
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped
    # Ne pas exposer directement le port backend

  frontend:
    image: ghcr.io/votre-username/moteur-inscriptions-frontend:latest
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    # Ne pas exposer directement le port frontend

  # Reverse proxy Nginx pour gérer HTTPS et routing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Service de sauvegarde automatique
  backup:
    image: postgres:15
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts:/scripts:ro
    networks:
      - app-network
    entrypoint: |
      sh -c '
      echo "0 2 * * * cd /backup && pg_dump -h postgres -U ${DB_USERNAME} ${DB_NAME:-inscriptions_db} > backup_$$(date +%Y%m%d_%H%M%S).sql && find /backup -name "*.sql" -mtime +7 -delete" | crontab -
      crond -f
      '
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local