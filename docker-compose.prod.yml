services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:17
    container_name: assolution-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: assolution_prod
      POSTGRES_USER: assolution_user  
      POSTGRES_PASSWORD: ${DB_PASSWORD_PROD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    ports:
      - "5434:5432"
    networks:
      - assolution-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U assolution_user -d assolution_prod"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Spring Boot Backend - Production Optimis√©
  backend:
    build:
      context: .
      dockerfile: ./inscriptions/inscriptions-backend/Dockerfile.prod
    container_name: assolution-backend-prod
    restart: always
    environment:
      # ‚úÖ VARIABLES COH√âRENTES AVEC VOS SECRETS GITHUB
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: assolution_prod
      DB_USER: assolution_user
      DB_PASSWORD: ${DB_PASSWORD_PROD}
      
      # ‚úÖ Variables Spring Boot directes
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/assolution_prod
      SPRING_DATASOURCE_USERNAME: assolution_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD_PROD}
      
      # ‚úÖ Secrets de production (versions _PROD)
      JWT_SECRET: ${JWT_SECRET_PROD:-temp_jwt_secret_for_testing}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY_PROD:-sk_test_placeholder}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET_PROD:-whsec_placeholder}
      
      # ‚úÖ NOUVEAU : Mot de passe admin pour les endpoints s√©curis√©s
      ADMIN_PASSWORD_PROD: ${ADMIN_PASSWORD_PROD:-secure_default_password_2024}
      
      # ‚úÖ Configuration email (versions _PROD pour coh√©rence avec template)
      EMAIL_HOST_PROD: ${EMAIL_HOST_PROD:-smtp.gmail.com}
      EMAIL_USER_PROD: ${EMAIL_USER_PROD:-test@gmail.com}
      EMAIL_PASSWORD_PROD: ${EMAIL_PASSWORD_PROD:-temp_password}
      EMAIL_BASE_URL: ${EMAIL_BASE_URL:-http://localhost}
      
      # ‚úÖ CORS configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost}
      
      # ‚úÖ Configuration JVM optimis√©e et COMPATIBLE Java 21
      JAVA_OPTS: "-Xmx512m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true"
      
      # ‚úÖ Variables pour monitoring des performances
      STARTUP_MONITORING: "true"
      SPRING_OUTPUT_ANSI_ENABLED: "never"
      SERVER_PORT: 8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - assolution-prod-network
    volumes:
      - backend_logs:/app/logs
    ports:
      - "8080:8080"
    healthcheck:
      # ‚úÖ HEALTH CHECK OPTIMIS√â - d√©marrage plus rapide
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'

# Frontend Builder - juste copier les fichiers d√©j√† build√©s
  frontend-builder:
    build:
      context: .
      dockerfile: ./inscriptions/inscriptions-frontend/Dockerfile.prod
    container_name: assolution-frontend-builder
    restart: "no"
    volumes:
      - frontend_static_files:/tmp/dist
    # ‚úÖ COMMANDE CORRIG√âE - PAS DE REBUILD, JUSTE COPIE
    command: >
      sh -c "
        echo 'üöÄ Copying pre-built frontend files...' &&
        echo 'üîç Checking /app/dist contents:' &&
        ls -la /app/dist/ &&
        echo 'üì¶ Copying to shared volume...' &&
        cp -r /app/dist/* /tmp/dist/ &&
        echo '‚úÖ Files copied successfully!' &&
        echo 'üìä Volume contents:' &&
        ls -la /tmp/dist/ &&
        echo 'üéØ Frontend ready for nginx!'
      "
    environment:
      - FRONTEND_API_URL=${FRONTEND_API_URL:-/api}
      - FRONTEND_BASE_URL=${FRONTEND_BASE_URL:-}
      - BACKEND_URL_PROD=${BACKEND_URL_PROD:-}
      - STRIPE_PUBLISHABLE_KEY_PROD=${STRIPE_PUBLISHABLE_KEY_PROD:-pk_test_placeholder}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-false}
      - ENABLE_HTTPS_REDIRECT=${ENABLE_HTTPS_REDIRECT:-false}
      - SUPPORT_EMAIL=${SUPPORT_EMAIL:-support@assolution.com}
      - SALES_EMAIL=${SALES_EMAIL:-contact@assolution.com}
      - SUPPORT_PHONE=${SUPPORT_PHONE:-+33 1 XX XX XX XX}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN:-localhost}
      - COOKIE_SECURE=${COOKIE_SECURE:-false}
      - GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID:-}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-}
      - EMAIL_BASE_URL=${EMAIL_BASE_URL:-}
    networks:
      - assolution-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Nginx Reverse Proxy Optimis√©
  nginx:
    image: nginx:1.25-alpine
    container_name: assolution-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - assolution-prod-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - frontend_static_files:/usr/share/nginx/html:ro
      # ‚úÖ NOUVEAU : Cache directories pour nginx optimis√©
      - nginx_cache:/var/cache/nginx
      - nginx_tmp_cache:/tmp/nginx_cache
    depends_on:
      frontend-builder:
        condition: service_completed_successfully
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

networks:
  assolution-prod-network:
    driver: bridge
    name: assolution-prod-network

volumes:
  postgres_prod_data:
    name: assolution-postgres-prod-data
  frontend_static_files:
    name: assolution-frontend-static
  backend_logs:
    name: assolution-backend-logs
  # ‚úÖ NOUVEAUX VOLUMES pour nginx optimis√©
  nginx_cache:
    name: assolution-nginx-cache
  nginx_tmp_cache:
    name: assolution-nginx-tmp-cache