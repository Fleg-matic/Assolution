name: 🚀 Deploy Development

on:
    push:
        branches: [develop]
    workflow_dispatch:

jobs:
    test-backend:
        name: 🧪 Test Backend
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:17
                env:
                    POSTGRES_DB: assolution_test
                    POSTGRES_USER: assolution_user
                    POSTGRES_PASSWORD: test123
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: ☕ Setup Java 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: 📦 Cache Maven dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

            - name: 🔧 Run Backend Tests
              working-directory: ./inscriptions/inscriptions-backend
              run: |
                  mvn clean test
                  mvn jacoco:report

            - name: 📊 SonarQube Analysis
              working-directory: ./inscriptions/inscriptions-backend
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  mvn sonar:sonar \
                    -Dsonar.projectKey=assolution \
                    -Dsonar.organization=fleg-matic \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.projectName="Assolution" \
                    -Dsonar.projectDescription="API REST Spring Boot pour la plateforme d'inscriptions" \
                    -Dsonar.links.homepage=https://github.com/${{ github.repository }} \
                    -Dsonar.links.ci=https://github.com/${{ github.repository }}/actions \
                    -Dsonar.links.scm=https://github.com/${{ github.repository }} \
                    -Dsonar.sources=src/main/java \
                    -Dsonar.tests=src/test/java \
                    -Dsonar.java.binaries=target/classes \
                    -Dsonar.java.test.binaries=target/test-classes \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                    -Dsonar.junit.reportPaths=target/surefire-reports

    test-frontend:
        name: 🎨 Test Frontend
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: 🟢 Setup Node.js 22
              uses: actions/setup-node@v4
              with:
                  node-version: "22"
                  cache: "npm"
                  cache-dependency-path: ./inscriptions/inscriptions-frontend/package-lock.json

            - name: 📦 Install Frontend Dependencies
              working-directory: ./inscriptions/inscriptions-frontend
              run: |
                  npm cache clean --force
                  rm -f package-lock.json
                  npm install

            - name: 🔧 Run Frontend Tests
              working-directory: ./inscriptions/inscriptions-frontend
              env:
                  CHROME_BIN: "/usr/bin/google-chrome-stable"
                  DISPLAY: ":99"
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-0 libnss3 libxss1 libasound2 libxtst6 xvfb
                  Xvfb :99 -screen 0 1024x768x16 &
                  npm run test:ci

            - name: 🏗️ Build Frontend
              working-directory: ./inscriptions/inscriptions-frontend
              run: npm run build

    e2e-tests:
        name: 🔬 E2E Tests
        runs-on: ubuntu-latest
        needs: [test-backend, test-frontend]

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: 🟢 Setup Node.js 22
              uses: actions/setup-node@v4
              with:
                  node-version: "22"

            - name: 🔧 Generate config files for E2E
              run: |
                  echo "📝 Création du fichier cypress.config.js..."
                  cat > cypress.config.js << 'EOF'
                  const { defineConfig } = require('cypress')

                  module.exports = defineConfig({
                    e2e: {
                      baseUrl: '${{ secrets.CYPRESS_BASE_URL }}',
                      apiUrl: '${{ secrets.CYPRESS_API_URL }}',
                      env: {
                        environment: '${{ secrets.CYPRESS_ENVIRONMENT }}',
                        testUserEmail: '${{ secrets.CYPRESS_TEST_USER_EMAIL }}',
                        testUserPassword: '${{ secrets.CYPRESS_TEST_USER_PASSWORD }}',
                        testAdminEmail: '${{ secrets.CYPRESS_TEST_ADMIN_EMAIL }}',
                        testAdminPassword: '${{ secrets.CYPRESS_TEST_ADMIN_PASSWORD }}'
                      },
                      setupNodeEvents(on, config) {
                        // implement node event listeners here
                      },
                    },
                  })
                  EOF

                  echo "📝 Création du fichier .env..."
                  cat > .env << 'EOF'
                  # Database Configuration
                  DB_HOST=postgres
                  DB_PORT=5432
                  DB_NAME=assolution_dev
                  DB_USER=assolution_user
                  DB_PASSWORD=${{ secrets.DB_PASSWORD }}

                  # JWT Configuration
                  JWT_SECRET=${{ secrets.JWT_SECRET }}
                  JWT_EXPIRATION=86400

                  # Stripe Configuration
                  STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
                  STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}

                  # Email Configuration
                  EMAIL_HOST=${{ secrets.EMAIL_HOST }}
                  EMAIL_PORT=587
                  EMAIL_USER=${{ secrets.EMAIL_USER }}
                  EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
                  EMAIL_FROM=noreply@assolution.com

                  # Application Configuration
                  APP_ENV=development
                  APP_DEBUG=true
                  APP_URL=http://localhost:8080
                  FRONTEND_URL=http://localhost:4200
                  EOF

                  echo "📝 Création du fichier application.properties..."
                  cat > inscriptions/inscriptions-backend/src/main/resources/application.properties << 'EOF'
                  # Server Configuration
                  server.port=8080
                  server.servlet.context-path=/api

                  # Database Configuration
                  spring.datasource.url=jdbc:postgresql://postgres:5432/assolution_dev
                  spring.datasource.username=assolution_user
                  spring.datasource.password=${{ secrets.DB_PASSWORD }}
                  spring.datasource.driver-class-name=org.postgresql.Driver

                  # JPA Configuration
                  spring.jpa.hibernate.ddl-auto=update
                  spring.jpa.show-sql=false
                  spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
                  spring.jpa.properties.hibernate.format_sql=true

                  # JWT Configuration
                  app.jwt.secret=${{ secrets.JWT_SECRET }}
                  app.jwt.expiration=86400

                  # Stripe Configuration
                  stripe.secret.key=${{ secrets.STRIPE_SECRET_KEY }}
                  stripe.webhook.secret=${{ secrets.STRIPE_WEBHOOK_SECRET }}

                  # Email Configuration
                  spring.mail.host=${{ secrets.EMAIL_HOST }}
                  spring.mail.port=587
                  spring.mail.username=${{ secrets.EMAIL_USER }}
                  spring.mail.password=${{ secrets.EMAIL_PASSWORD }}
                  spring.mail.properties.mail.smtp.auth=true
                  spring.mail.properties.mail.smtp.starttls.enable=true

                  # Logging Configuration
                  logging.level.com.assolution=INFO
                  logging.level.org.springframework.security=DEBUG
                  EOF

                  echo "📝 Création du dossier et fichier init-scripts/01-init-db.sql..."
                  mkdir -p init-scripts
                  cat > init-scripts/01-init-db.sql << 'EOF'
                  -- Création de la base de données et de l'utilisateur pour le développement
                  CREATE DATABASE IF NOT EXISTS assolution_dev;
                  CREATE USER IF NOT EXISTS 'assolution_user'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';
                  GRANT ALL PRIVILEGES ON assolution_dev.* TO 'assolution_user'@'%';
                  FLUSH PRIVILEGES;

                  -- Utilisation de la base de données
                  USE assolution_dev;

                  -- Tables de base pour les tests E2E
                  -- Ajoutez ici vos tables de base si nécessaire
                  EOF

            - name: 📦 Install Cypress
              run: |
                  npm install cypress --save-dev
                  npx cypress verify

            - name: 🔧 Run Cypress Tests
              run: |
                  # Démarrer les services en arrière-plan
                  docker compose up -d

                  # Attendre que les services soient prêts
                  timeout 120 bash -c 'until curl -f http://localhost:80; do sleep 5; done'

                  # Lancer les tests Cypress
                  npx cypress run --config-file ./cypress.config.js --spec "./cypress/e2e/**/*.cy.js" --browser chrome --headless

                  # Nettoyer
                  docker compose down

    deploy-dev:
        name: 🚀 Deploy to Development
        runs-on: ubuntu-latest
        needs: [test-backend, test-frontend, e2e-tests]
        environment: development

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: 🔧 Generate deployment config files
              run: |
                  echo "📝 Création du fichier environment.ts..."
                  cat > inscriptions/inscriptions-frontend/src/environments/environment.ts << 'EOF'
                  export const environment = {
                    production: false,
                    apiUrl: '${{ secrets.FRONTEND_API_URL }}',
                    baseUrl: '${{ secrets.FRONTEND_BASE_URL }}',
                    stripePublishableKey: '${{ secrets.STRIPE_PUBLISHABLE_KEY_DEV }}',
                    enableHttpsRedirect: false,
                    
                    // Contact Information
                    supportEmail: '${{ secrets.SUPPORT_EMAIL }}',
                    salesEmail: '${{ secrets.SALES_EMAIL }}',
                    supportPhone: '${{ secrets.SUPPORT_PHONE }}',
                    
                    // Cookie Configuration
                    cookieDomain: '${{ secrets.COOKIE_DOMAIN }}',
                    cookieSecure: false,
                    
                    // Analytics
                    googleAnalyticsId: '${{ secrets.GOOGLE_ANALYTICS_ID }}',
                    enableAnalytics: false
                  };
                  EOF

                  echo "✅ Fichiers de déploiement créés !"

            - name: 🔑 Setup SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_KEY }}

            - name: 📂 Deploy to VM
              run: |
                  # Créer le dossier de déploiement
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                    mkdir -p /home/dbm/assolution-dev
                    sudo systemctl is-active docker || sudo systemctl start docker
                  "

                  # Copier les fichiers
                  scp -o StrictHostKeyChecking=no -r ./* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/dbm/assolution-dev/

                  # Déployer l'application
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                    cd /home/dbm/assolution-dev
                    
                    # Arrêter les anciens containers
                    docker compose down --remove-orphans || true
                    
                    # Nettoyer les images non utilisées
                    docker system prune -f
                    
                    # Construire et démarrer
                    docker compose up -d --build
                    
                    # Attendre que les services soient prêts
                    sleep 30
                    
                    # Vérifier le statut
                    docker compose ps
                    docker compose logs --tail=50
                  "

            - name: 🩺 Health Check
              run: |
                  sleep 60

                  # Test de l'API
                  for i in {1..10}; do
                    if curl -f http://${{ secrets.SSH_HOST }}/api/health; then
                      echo "✅ API is healthy"
                      break
                    fi
                    echo "⏳ Waiting for API... (attempt $i/10)"
                    sleep 10
                  done

                  # Test du Frontend
                  if curl -f http://${{ secrets.SSH_HOST }}/; then
                    echo "✅ Frontend is accessible"
                  else
                    echo "❌ Frontend health check failed"
                    exit 1
                  fi

            - name: 📢 Deployment Notification
              if: success()
              run: |
                  echo "🎉 Deployment successful!"
                  echo "🔗 Application URL: http://${{ secrets.SSH_HOST }}"
                  echo "🔗 API URL: http://${{ secrets.SSH_HOST }}/api"
                  echo "📊 Health Check: http://${{ secrets.SSH_HOST }}/api/health"
