name: üè≠ Deploy Production

on:
    push:
        branches: [master]
    workflow_dispatch:

jobs:
    test-complete:
        name: üß™ Complete Test Suite
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:17
                env:
                    POSTGRES_DB: assolution_test
                    POSTGRES_USER: assolution_user
                    POSTGRES_PASSWORD: test123
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: ‚òï Setup Java 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: üü¢ Setup Node.js 22
              uses: actions/setup-node@v4
              with:
                  node-version: "22"
                  cache: "npm"
                  cache-dependency-path: ./inscriptions/inscriptions-frontend/package-lock.json

            - name: üì¶ Cache Maven dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

            - name: üîß Backend Tests & Build
              working-directory: ./inscriptions/inscriptions-backend
              run: |
                  mvn clean test verify
                  mvn jacoco:report
                  mvn package -DskipTests

            - name: üì¶ Frontend Tests & Build
              working-directory: ./inscriptions/inscriptions-frontend
              run: |
                  npm install --legacy-peer-deps
                  npm run test -- --watch=false --browsers=ChromeHeadless
                  npm run build:prod

            - name: üìä SonarQube Analysis
              working-directory: ./inscriptions/inscriptions-backend
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  mvn sonar:sonar \
                    -Dsonar.projectKey=assolution \
                    -Dsonar.organization=fleg-matic \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.projectName="Assolution" \
                    -Dsonar.projectDescription="API REST Spring Boot pour la plateforme d'inscriptions" \
                    -Dsonar.links.homepage=https://github.com/${{ github.repository }} \
                    -Dsonar.links.ci=https://github.com/${{ github.repository }}/actions \
                    -Dsonar.links.scm=https://github.com/${{ github.repository }} \
                    -Dsonar.sources=src/main/java \
                    -Dsonar.tests=src/test/java \
                    -Dsonar.java.binaries=target/classes \
                    -Dsonar.java.test.binaries=target/test-classes \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                    -Dsonar.junit.reportPaths=target/surefire-reports

            - name: üî¨ E2E Tests
              uses: cypress-io/github-action@v6
              with:
                  working-directory: ./inscriptions/inscriptions-frontend
                  start: docker-compose -f docker-compose.prod.yml up -d
                  wait-on: "http://localhost:80"
                  wait-on-timeout: 180

    security-scan:
        name: üîí Security Scan
        runs-on: ubuntu-latest
        needs: [test-complete]

        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: üîç Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: üì§ Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    deploy-prod:
        name: üöÄ Deploy to Production
        runs-on: ubuntu-latest
        needs: [test-complete, security-scan]
        environment: production

        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # üéØ STEP FINAL - G√©n√©ration de TOUS les fichiers de configuration depuis les templates
            - name: üîß Generate all config files from templates
              run: |
                  echo "üìù Cr√©ation du fichier .env..."
                  cp config-templates/.env.template .env
                  sed -i "s/\${DB_PASSWORD}/${{ secrets.DB_PASSWORD }}/g" .env
                  sed -i "s/\${JWT_SECRET}/${{ secrets.JWT_SECRET }}/g" .env
                  sed -i "s/\${STRIPE_SECRET_KEY}/${{ secrets.STRIPE_SECRET_KEY }}/g" .env
                  sed -i "s/\${STRIPE_WEBHOOK_SECRET}/${{ secrets.STRIPE_WEBHOOK_SECRET }}/g" .env
                  sed -i "s/\${EMAIL_HOST}/${{ secrets.EMAIL_HOST }}/g" .env
                  sed -i "s/\${EMAIL_USER}/${{ secrets.EMAIL_USER }}/g" .env
                  sed -i "s/\${EMAIL_PASSWORD}/${{ secrets.EMAIL_PASSWORD }}/g" .env

                  echo "üìù Cr√©ation du fichier application.properties..."
                  cp config-templates/application.properties.template inscriptions/inscriptions-backend/src/main/resources/application.properties
                  sed -i "s/\${DB_PASSWORD}/${{ secrets.DB_PASSWORD }}/g" inscriptions/inscriptions-backend/src/main/resources/application.properties
                  sed -i "s/\${JWT_SECRET}/${{ secrets.JWT_SECRET }}/g" inscriptions/inscriptions-backend/src/main/resources/application.properties
                  sed -i "s/\${STRIPE_SECRET_KEY}/${{ secrets.STRIPE_SECRET_KEY }}/g" inscriptions/inscriptions-backend/src/main/resources/application.properties
                  sed -i "s/\${STRIPE_WEBHOOK_SECRET}/${{ secrets.STRIPE_WEBHOOK_SECRET }}/g" inscriptions/inscriptions-backend/src/main/resources/application.properties
                  sed -i "s/\${EMAIL_HOST}/${{ secrets.EMAIL_HOST }}/g" inscriptions/inscriptions-backend/src/main/resources/application.properties
                  sed -i "s/\${EMAIL_USER}/${{ secrets.EMAIL_USER }}/g" inscriptions/inscriptions-backend/src/main/resources/application.properties
                  sed -i "s/\${EMAIL_PASSWORD}/${{ secrets.EMAIL_PASSWORD }}/g" inscriptions/inscriptions-backend/src/main/resources/application.properties

                  echo "üìù Cr√©ation du fichier cypress.config.js..."
                  cp config-templates/cypress.config.js.template cypress.config.js
                  sed -i "s/\${CYPRESS_BASE_URL}/${{ secrets.CYPRESS_BASE_URL }}/g" cypress.config.js
                  sed -i "s/\${CYPRESS_API_URL}/${{ secrets.CYPRESS_API_URL }}/g" cypress.config.js
                  sed -i "s/\${CYPRESS_ENVIRONMENT}/${{ secrets.CYPRESS_ENVIRONMENT }}/g" cypress.config.js
                  sed -i "s/\${CYPRESS_TEST_USER_EMAIL}/${{ secrets.CYPRESS_TEST_USER_EMAIL }}/g" cypress.config.js
                  sed -i "s/\${CYPRESS_TEST_USER_PASSWORD}/${{ secrets.CYPRESS_TEST_USER_PASSWORD }}/g" cypress.config.js
                  sed -i "s/\${CYPRESS_TEST_ADMIN_EMAIL}/${{ secrets.CYPRESS_TEST_ADMIN_EMAIL }}/g" cypress.config.js
                  sed -i "s/\${CYPRESS_TEST_ADMIN_PASSWORD}/${{ secrets.CYPRESS_TEST_ADMIN_PASSWORD }}/g" cypress.config.js

                  echo "üìù Cr√©ation du fichier 01-init-db.sql..."
                  cp config-templates/01-init-db.sql.template init-scripts/01-init-db.sql
                  sed -i "s/\${DB_PASSWORD}/${{ secrets.DB_PASSWORD }}/g" init-scripts/01-init-db.sql

                  echo "üìù Cr√©ation du fichier environment.prod.ts..."
                  cp config-templates/environment.prod.ts.template inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${FRONTEND_API_URL}/${{ secrets.FRONTEND_API_URL }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${FRONTEND_BASE_URL}/${{ secrets.FRONTEND_BASE_URL }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${STRIPE_PUBLISHABLE_KEY_PROD}/${{ secrets.STRIPE_PUBLISHABLE_KEY_PROD }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${ENABLE_HTTPS_REDIRECT}/${{ secrets.ENABLE_HTTPS_REDIRECT }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${SUPPORT_EMAIL}/${{ secrets.SUPPORT_EMAIL }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${SALES_EMAIL}/${{ secrets.SALES_EMAIL }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${SUPPORT_PHONE}/${{ secrets.SUPPORT_PHONE }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${COOKIE_DOMAIN}/${{ secrets.COOKIE_DOMAIN }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${COOKIE_SECURE}/${{ secrets.COOKIE_SECURE }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${GOOGLE_ANALYTICS_ID}/${{ secrets.GOOGLE_ANALYTICS_ID }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts
                  sed -i "s/\${ENABLE_ANALYTICS}/${{ secrets.ENABLE_ANALYTICS }}/g" inscriptions/inscriptions-frontend/src/environments/environment.prod.ts

                  echo "‚úÖ Tous les fichiers de configuration cr√©√©s depuis les templates !"

            - name: üîë Setup SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_KEY }}

            - name: üíæ Backup Production Database
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                    cd /home/dbm/assolution-prod || exit 0
                    
                    # Cr√©er un backup avant d√©ploiement
                    if docker-compose ps | grep postgres; then
                      timestamp=\$(date +%Y%m%d_%H%M%S)
                      mkdir -p backups
                      docker-compose exec -T postgres pg_dump -U assolution_user assolution_prod > backups/backup_\${timestamp}.sql
                      echo 'üíæ Database backup created: backup_\${timestamp}.sql'
                    fi
                  "

            - name: üìÇ Deploy to Production VM
              run: |
                  # Cr√©er le dossier de production
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                    mkdir -p /home/dbm/assolution-prod
                    sudo systemctl is-active docker || sudo systemctl start docker
                  "

                  # Copier les fichiers
                  scp -o StrictHostKeyChecking=no -r ./* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/dbm/assolution-prod/

                  # D√©ploiement en production
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                    cd /home/dbm/assolution-prod
                    
                    # Rolling update : d√©marrer les nouveaux containers
                    docker-compose -f docker-compose.prod.yml up -d --build --no-deps backend
                    sleep 30
                    
                    # V√©rifier que le backend est op√©rationnel
                    if curl -f http://localhost/api/health; then
                      echo '‚úÖ Backend is healthy, updating frontend'
                      docker-compose -f docker-compose.prod.yml up -d --build --no-deps frontend nginx
                    else
                      echo '‚ùå Backend health check failed, rolling back'
                      exit 1
                    fi
                    
                    # Nettoyer les anciennes images
                    docker image prune -f
                    
                    # Logs
                    docker-compose -f docker-compose.prod.yml ps
                    docker-compose -f docker-compose.prod.yml logs --tail=20
                  "

            - name: ü©∫ Production Health Checks
              run: |
                  sleep 90

                  # Tests de sant√© complets
                  echo "üîç Running comprehensive health checks..."

                  # Test API Health
                  for i in {1..15}; do
                    if curl -f http://${{ secrets.SSH_HOST }}/api/health; then
                      echo "‚úÖ API health check passed"
                      break
                    fi
                    echo "‚è≥ Waiting for API... (attempt $i/15)"
                    sleep 10
                    if [ $i -eq 15 ]; then
                      echo "‚ùå API health check failed after 15 attempts"
                      exit 1
                    fi
                  done

                  # Test Frontend
                  if curl -f http://${{ secrets.SSH_HOST }}/; then
                    echo "‚úÖ Frontend is accessible"
                  else
                    echo "‚ùå Frontend accessibility check failed"
                    exit 1
                  fi

                  # Test Database Connection
                  if curl -f http://${{ secrets.SSH_HOST }}/api/health/db; then
                    echo "‚úÖ Database connection is healthy"
                  else
                    echo "‚ùå Database connection check failed"
                    exit 1
                  fi

            - name: üîÑ Post-Deployment Tasks
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                    cd /home/dbm/assolution-prod
                    
                    # Logs de d√©ploiement
                    echo 'üìä === DEPLOYMENT REPORT ===' > deployment_report.txt
                    echo 'Deployment Date: \$(date)' >> deployment_report.txt
                    echo 'Git Commit: ${{ github.sha }}' >> deployment_report.txt
                    echo 'Deployed by: ${{ github.actor }}' >> deployment_report.txt
                    echo '' >> deployment_report.txt
                    echo 'üê≥ Container Status:' >> deployment_report.txt
                    docker-compose -f docker-compose.prod.yml ps >> deployment_report.txt
                    
                    # Garder seulement les 10 derniers backups
                    find backups/ -name '*.sql' -type f -print0 | xargs -0 ls -t | tail -n +11 | xargs -I {} rm -- {} || true
                  "

            - name: üì¢ Production Deployment Notification
              if: success()
              run: |
                  echo "üéâ Production deployment successful!"
                  echo "üîó Production URL: http://${{ secrets.SSH_HOST }}"
                  echo "üîó API URL: http://${{ secrets.SSH_HOST }}/api"
                  echo "üìä Health Check: http://${{ secrets.SSH_HOST }}/api/health"
                  echo "üîí Security scan completed"
                  echo "üíæ Database backup created"

            - name: üö® Rollback on Failure
              if: failure()
              run: |
                  echo "‚ùå Deployment failed, attempting rollback..."
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                    cd /home/dbm/assolution-prod
                    
                    # Utiliser la derni√®re image qui fonctionnait
                    docker-compose -f docker-compose.prod.yml down
                    docker-compose -f docker-compose.prod.yml up -d
                    
                    echo 'üîÑ Rollback completed'
                  "
                  exit 1
