# Multi-stage build pour Production - Assolution Frontend
FROM node:22-alpine AS builder

# M√©tadonn√©es
LABEL maintainer="Assolution Team"
LABEL version="1.0"
LABEL description="Assolution Frontend - Production Build"

# Variables d'environnement pour le build
ENV NODE_ENV=production
ENV NG_CLI_ANALYTICS=false

# Installation des outils de build
RUN apk add --no-cache git python3 make g++ curl bash

# Installation d'Angular CLI
RUN npm install -g @angular/cli@20

WORKDIR /build

# Copie des fichiers de d√©pendances
COPY package*.json ./
RUN npm ci --include=dev && npm cache clean --force

# Copie du code source
COPY . .

# Build de production avec optimisations
RUN ng build --configuration=production --output-hashing=all

# Diagnostic intelligent de la structure de build
RUN echo "üîç DIAGNOSTIC BUILD STRUCTURE:" && \
    echo "üìÅ Contents of /build:" && \
    ls -la /build/ && \
    echo "üìÅ Contents of /build/dist:" && \
    ls -la /build/dist/ 2>/dev/null || echo "No dist directory" && \
    echo "üìÅ Looking for index.html:" && \
    find /build -name "index.html" -type f && \
    echo "üìÅ Built files structure:" && \
    find /build/dist -type f 2>/dev/null | head -20 || echo "No built files found"

# Copie intelligente des fichiers - teste plusieurs emplacements d'Angular 20
RUN mkdir -p /build/final_dist && \
    if [ -f "/build/dist/inscriptions-frontend/browser/index.html" ]; then \
        echo "‚úÖ Found Angular 20 hybrid mode files in /build/dist/inscriptions-frontend/browser/" && \
        cp -r /build/dist/inscriptions-frontend/browser/* /build/final_dist/; \
    elif [ -f "/build/dist/inscriptions-frontend/index.html" ]; then \
        echo "‚úÖ Found Angular files in /build/dist/inscriptions-frontend/" && \
        cp -r /build/dist/inscriptions-frontend/* /build/final_dist/; \
    elif [ -f "/build/dist/browser/index.html" ]; then \
        echo "‚úÖ Found Angular 20 browser files in /build/dist/browser/" && \
        cp -r /build/dist/browser/* /build/final_dist/; \
    elif [ -f "/build/dist/index.html" ]; then \
        echo "‚úÖ Found Angular files in /build/dist/" && \
        cp -r /build/dist/* /build/final_dist/; \
    else \
        echo "‚ùå No index.html found anywhere!" && \
        echo "üìã Full directory structure:" && \
        find /build -type f -name "*.html" && \
        exit 1; \
    fi && \
    echo "üìä Final dist contents:" && \
    ls -la /build/final_dist/ && \
    echo "üìä Final dist size:" && \
    du -sh /build/final_dist/

# ===============================================
# Stage de production - JUSTE LES FICHIERS STATIQUES
# ===============================================
FROM alpine:3.19 AS production

# M√©tadonn√©es
LABEL maintainer="Assolution Team"
LABEL version="1.0"
LABEL description="Assolution Frontend - Static Files Only"

# Installation d'outils minimaux pour health check
RUN apk add --no-cache curl bash && \
    rm -rf /var/cache/apk/*

# Cr√©ation du r√©pertoire pour les fichiers statiques
RUN mkdir -p /app/dist

# Copie SEULEMENT des fichiers build√©s (pas de serveur web)
COPY --from=builder /build/final_dist/ /app/dist/

# Script de v√©rification simple
RUN echo '#!/bin/bash' > /app/verify-files.sh && \
    echo 'set -euo pipefail' >> /app/verify-files.sh && \
    echo 'echo "üìÅ Assolution Frontend - Static Files Ready"' >> /app/verify-files.sh && \
    echo 'if [ ! -f "/app/dist/index.html" ]; then' >> /app/verify-files.sh && \
    echo '    echo "‚ùå CRITICAL: No index.html found!"' >> /app/verify-files.sh && \
    echo '    ls -la /app/dist/' >> /app/verify-files.sh && \
    echo '    exit 1' >> /app/verify-files.sh && \
    echo 'fi' >> /app/verify-files.sh && \
    echo 'echo "‚úÖ Static files ready: $(ls -1 /app/dist | wc -l) files"' >> /app/verify-files.sh && \
    echo 'echo "üìä Total size: $(du -sh /app/dist | cut -f1)"' >> /app/verify-files.sh && \
    echo 'echo "üéØ Files will be served by external Nginx reverse proxy"' >> /app/verify-files.sh && \
    echo 'echo "‚è≥ Keeping container alive..."' >> /app/verify-files.sh && \
    echo 'tail -f /dev/null' >> /app/verify-files.sh && \
    chmod +x /app/verify-files.sh

# Health check simple (v√©rifie juste que les fichiers existent)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD [ -f /app/dist/index.html ] || exit 1

# Pas de port expos√© (les fichiers sont servis par le reverse proxy)
WORKDIR /app/dist

# Point d'entr√©e simple
ENTRYPOINT ["/app/verify-files.sh"]