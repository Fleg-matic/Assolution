# Multi-stage build pour Production
FROM node:22-alpine AS builder

# Variables d'environnement pour le build
ENV NODE_ENV=production
ENV NG_CLI_ANALYTICS=false

# Installation des outils de build
RUN apk add --no-cache git python3 make g++

# Installation d'Angular CLI
RUN npm install -g @angular/cli@20

WORKDIR /build

# Copie des fichiers de dépendances
COPY package*.json ./
RUN npm ci --only=production=false

# Copie du code source
COPY . .

# Build de production
RUN ng build --configuration=production

# Diagnostic complet de la structure de build
RUN echo "🔍 DIAGNOSTIC BUILD STRUCTURE:" && \
    echo "📁 Contents of /build:" && \
    ls -la /build/ && \
    echo "📁 Contents of /build/dist:" && \
    ls -la /build/dist/ && \
    echo "📁 Looking for index.html:" && \
    find /build -name "index.html" -type f && \
    echo "📁 Looking for all built files:" && \
    find /build/dist -type f | head -20

# Copie intelligente des fichiers - teste plusieurs emplacements possibles
RUN mkdir -p /build/final_dist && \
    if [ -f "/build/dist/index.html" ]; then \
        echo "✅ Found files in /build/dist/" && \
        cp -r /build/dist/* /build/final_dist/; \
    elif [ -f "/build/dist/inscriptions-frontend/index.html" ]; then \
        echo "✅ Found files in /build/dist/inscriptions-frontend/" && \
        cp -r /build/dist/inscriptions-frontend/* /build/final_dist/; \
    elif [ -f "/build/dist/browser/index.html" ]; then \
        echo "✅ Found files in /build/dist/browser/" && \
        cp -r /build/dist/browser/* /build/final_dist/; \
    else \
        echo "❌ No index.html found anywhere!" && \
        echo "📋 Full directory structure:" && \
        find /build -type f -name "*.html" && \
        exit 1; \
    fi && \
    echo "📊 Final dist contents:" && \
    ls -la /build/final_dist/

# Stage de production avec Nginx
FROM nginx:1.25-alpine

# Installation des outils essentiels
RUN apk add --no-cache curl bash tini

# Suppression de la configuration Nginx par défaut
RUN rm -rf /usr/share/nginx/html/* && \
    rm /etc/nginx/conf.d/default.conf

# Copie des fichiers buildés depuis le stage builder
COPY --from=builder /build/final_dist/ /usr/share/nginx/html/

# Configuration Nginx pour Angular SPA
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Gestion des assets avec cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # Gestion SPA - toutes les routes vers index.html
    location / {
        try_files $uri $uri/ /index.html;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
    }

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000" always;
    add_header X-XSS-Protection "1; mode=block" always;
}
EOF

# Configuration Nginx principale
RUN cat > /etc/nginx/nginx.conf << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    gzip on;

    include /etc/nginx/conf.d/*.conf;
}
EOF

# Script de démarrage avec vérifications
RUN cat > /app/start-frontend.sh << 'EOF'
#!/bin/bash
set -euo pipefail

echo "🎨 Starting Assolution Frontend (Production)"
echo "🌐 Nginx Version: $(nginx -v 2>&1)"
echo "📁 Serving files from: /usr/share/nginx/html"

# Vérification CRITIQUE des fichiers
if [ ! -f "/usr/share/nginx/html/index.html" ]; then
    echo "❌ CRITICAL: No index.html found!"
    echo "📋 Contents of /usr/share/nginx/html:"
    ls -la /usr/share/nginx/html/ || echo "Directory not accessible"
    echo "📋 Looking for HTML files:"
    find /usr/share/nginx/html -name "*.html" -type f || echo "No HTML files found"
    exit 1
fi

echo "✅ index.html found!"
echo "📊 Available files:"
ls -la /usr/share/nginx/html/

# Test de la configuration Nginx
nginx -t || {
    echo "❌ Nginx configuration test failed!"
    exit 1
}

echo "🚀 Starting Nginx..."
exec nginx -g 'daemon off;'
EOF

RUN chmod +x /app/start-frontend.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:80/health || exit 1

EXPOSE 80

ENTRYPOINT ["tini", "--", "/app/start-frontend.sh"]