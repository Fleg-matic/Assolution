# Multi-stage build pour Production - Assolution Frontend
FROM node:22-alpine AS builder

# Variables d'environnement pour le build
ENV NODE_ENV=development
ENV NG_CLI_ANALYTICS=false

# Installation des outils de build + envsubst pour substitution de variables
RUN apk add --no-cache git python3 make g++ curl bash gettext

WORKDIR /build

# Copier les fichiers de configuration npm en premier
COPY package.json package-lock.json ./

# V√©rifier que package-lock.json existe
RUN ls -la package*.json

# ‚úÖ Installation des d√©pendances avec versions TypeScript compatibles
RUN npm ci --no-audit --no-fund && \
    npm install --save-dev @angular/cli@20.1.6 && \
    npm install --save-dev @angular-devkit/build-angular@20.1.6 && \
    npm install --save-dev @angular/compiler-cli@20.1.6 && \
    npm install --save-dev typescript@5.8.3

# ‚úÖ COPIE DU TEMPLATE depuis le contexte de build (racine du mono-repo)
COPY config-templates/environment.prod.ts.template /tmp/environment.prod.ts.template

# Copie du code source du frontend
COPY inscriptions/inscriptions-frontend/ .

# ‚úÖ SUBSTITUTION DES VARIABLES D'ENVIRONNEMENT - AVEC GESTION DES VALEURS VIDES
RUN echo "üîß Processing environment variables from template..." && \
    if [ -f "/tmp/environment.prod.ts.template" ]; then \
        echo "üìù Substituting variables from config-templates..." && \
        echo "üîç Template content preview:" && \
        head -10 /tmp/environment.prod.ts.template && \
        echo "..." && \
        echo "üîÑ Setting up environment variables with fallbacks..." && \
        export FRONTEND_API_URL="${FRONTEND_API_URL:-/api}" && \
        export FRONTEND_BASE_URL="${FRONTEND_BASE_URL:-}" && \
        export STRIPE_PUBLISHABLE_KEY_PROD="${STRIPE_PUBLISHABLE_KEY_PROD:-pk_test_placeholder}" && \
        export ENABLE_ANALYTICS="${ENABLE_ANALYTICS:-false}" && \
        export ENABLE_HTTPS_REDIRECT="${ENABLE_HTTPS_REDIRECT:-false}" && \
        export SUPPORT_EMAIL="${SUPPORT_EMAIL:-support@assolution.com}" && \
        export SALES_EMAIL="${SALES_EMAIL:-contact@assolution.com}" && \
        export SUPPORT_PHONE="${SUPPORT_PHONE:-+33 1 XX XX XX XX}" && \
        export COOKIE_DOMAIN="${COOKIE_DOMAIN:-localhost}" && \
        export COOKIE_SECURE="${COOKIE_SECURE:-false}" && \
        export GOOGLE_ANALYTICS_ID="${GOOGLE_ANALYTICS_ID:-}" && \
        echo "üîç Debug: Variables after fallback setup:" && \
        echo "FRONTEND_API_URL=$FRONTEND_API_URL" && \
        echo "ENABLE_ANALYTICS=$ENABLE_ANALYTICS" && \
        echo "COOKIE_SECURE=$COOKIE_SECURE" && \
        echo "üîÑ Running envsubst..." && \
        envsubst < /tmp/environment.prod.ts.template > src/environments/environment.prod.ts && \
        echo "‚úÖ Environment file generated from template:" && \
        head -20 src/environments/environment.prod.ts && \
        echo "üìä File size: $(wc -l < src/environments/environment.prod.ts) lines" && \
        echo "üîç Checking for empty values..." && \
        if grep -q ": ," src/environments/environment.prod.ts; then \
            echo "‚ùå Found empty values, fixing..." && \
            sed -i 's/: ,/: false,/g' src/environments/environment.prod.ts && \
            echo "‚úÖ Empty values fixed"; \
        fi && \
        echo "üîç Variables substituted successfully"; \
    elif [ ! -f "src/environments/environment.prod.ts" ]; then \
        echo "‚ö†Ô∏è  Template not found, creating minimal fallback environment.prod.ts..." && \
        echo 'export const environment = {' | tee src/environments/environment.prod.ts > /dev/null && \
        echo '  production: true,' | tee -a src/environments/environment.prod.ts > /dev/null && \
        echo "  apiUrl: '/api'," | tee -a src/environments/environment.prod.ts > /dev/null && \
        echo "  appName: 'Assolution'," | tee -a src/environments/environment.prod.ts > /dev/null && \
        echo "  appVersion: '1.0.0'" | tee -a src/environments/environment.prod.ts > /dev/null && \
        echo '};' | tee -a src/environments/environment.prod.ts > /dev/null && \
        echo "‚ö†Ô∏è  Fallback environment created"; \
    else \
        echo "‚úÖ environment.prod.ts already exists, content preview:" && \
        head -10 src/environments/environment.prod.ts; \
    fi

# V√©rification du fichier g√©n√©r√©
RUN echo "üîç VERIFICATION FINALE environment.prod.ts:" && \
    if [ -f "src/environments/environment.prod.ts" ]; then \
        echo "‚úÖ File exists" && \
        echo "üìä Size: $(wc -l < src/environments/environment.prod.ts) lines, $(wc -c < src/environments/environment.prod.ts) bytes" && \
        echo "üîç First 5 lines:" && \
        head -5 src/environments/environment.prod.ts && \
        echo "üîç Checking for syntax errors..." && \
        node -c src/environments/environment.prod.ts && echo "‚úÖ Syntax OK" || echo "‚ùå Syntax error detected" && \
        echo "üìä TypeScript version: $(npx tsc --version)" && \
        echo "‚úÖ Environment and TypeScript ready for build"; \
    else \
        echo "‚ùå environment.prod.ts file missing!" && exit 1; \
    fi

# ‚úÖ BUILD ANGULAR avec gestion d'erreurs am√©lior√©e
RUN echo "üéØ Building Angular application..." && \
    echo "üìä Node version: $(node --version)" && \
    echo "üìä NPM version: $(npm --version)" && \
    echo "üìä Available memory: $(free -h | grep Mem | awk '{print $2}')" && \
    echo "üöÄ Starting build process..." && \
    npm run build:prod && \
    echo "‚úÖ Angular build completed successfully!"

# Diagnostic complet de la structure de build
RUN echo "üîç DIAGNOSTIC COMPLET BUILD STRUCTURE:" && \
    echo "üìÅ Root /build contents:" && \
    ls -la /build/ && \
    echo "" && \
    echo "üìÅ Contents of /build/dist:" && \
    ls -la /build/dist/ 2>/dev/null || echo "‚ùå No dist directory found" && \
    echo "" && \
    echo "üìÅ Searching for index.html recursively:" && \
    find /build -name "index.html" -type f 2>/dev/null || echo "‚ùå No index.html found" && \
    echo "" && \
    echo "üìÅ Searching for main.*.js files:" && \
    find /build -name "main.*.js" -type f 2>/dev/null || echo "‚ùå No main.js files found"

# Copie intelligente et robuste des fichiers build√©s
RUN echo "üì¶ SMART COPY OF BUILD ARTIFACTS:" && \
    mkdir -p /build/final_dist && \
    BUILD_COPIED=false && \
    if [ -f "/build/dist/inscriptions-frontend/browser/index.html" ]; then \
        echo "‚úÖ Method 1: Found Angular 17+ files in browser subdirectory" && \
        cp -r /build/dist/inscriptions-frontend/browser/* /build/final_dist/ && \
        BUILD_COPIED=true; \
    elif [ -f "/build/dist/inscriptions-frontend/index.html" ]; then \
        echo "‚úÖ Method 2: Found Angular files in project subdirectory" && \
        cp -r /build/dist/inscriptions-frontend/* /build/final_dist/ && \
        BUILD_COPIED=true; \
    elif [ -f "/build/dist/browser/index.html" ]; then \
        echo "‚úÖ Method 3: Found Angular files in browser directory" && \
        cp -r /build/dist/browser/* /build/final_dist/ && \
        BUILD_COPIED=true; \
    elif [ -f "/build/dist/index.html" ]; then \
        echo "‚úÖ Method 4: Found Angular files in root dist" && \
        cp -r /build/dist/* /build/final_dist/ && \
        BUILD_COPIED=true; \
    else \
        echo "‚ö†Ô∏è  Method 5: Fallback - copying all dist content..." && \
        if [ -d "/build/dist" ]; then \
            cp -r /build/dist/* /build/final_dist/ 2>/dev/null || true && \
            BUILD_COPIED=true; \
        fi; \
    fi && \
    if [ "$BUILD_COPIED" = "true" ]; then \
        echo "‚úÖ Build artifacts copied successfully" && \
        echo "üìä Final dist file count: $(find /build/final_dist -type f 2>/dev/null | wc -l)" && \
        echo "üìä Final dist size: $(du -sh /build/final_dist 2>/dev/null | cut -f1 || echo 'unknown')" && \
        echo "üîç Key files present:" && \
        ls -la /build/final_dist/index.html 2>/dev/null || echo "‚ùå index.html missing" && \
        ls -la /build/final_dist/main.*.js 2>/dev/null | head -3 || echo "‚ùå main.js files missing"; \
    else \
        echo "‚ùå CRITICAL: No build artifacts could be copied!" && \
        exit 1; \
    fi

# Stage final - Production runtime
FROM alpine:3.19 AS production

# Installation des outils n√©cessaires pour le runtime
RUN apk add --no-cache curl bash && \
    rm -rf /var/cache/apk/* && \
    mkdir -p /app/dist

# Copie des fichiers build√©s depuis le stage builder
COPY --from=builder /build/final_dist/ /app/dist/

# V√©rification finale des fichiers copi√©s
RUN echo "üîç FINAL PRODUCTION VERIFICATION:" && \
    echo "üìä Files in production: $(find /app/dist -type f | wc -l)" && \
    echo "üìä Total size: $(du -sh /app/dist | cut -f1)" && \
    echo "üîç Critical files check:" && \
    ls -la /app/dist/index.html 2>/dev/null && echo "‚úÖ index.html OK" || echo "‚ùå index.html MISSING" && \
    ls -la /app/dist/*.js 2>/dev/null | head -3 && echo "‚úÖ JS files OK" || echo "‚ùå JS files MISSING" && \
    ls -la /app/dist/*.css 2>/dev/null | head -3 && echo "‚úÖ CSS files OK" || echo "‚ö†Ô∏è  CSS files missing (may be normal)"

# Script de v√©rification et d√©marrage
RUN echo '#!/bin/bash' > /app/verify.sh && \
    echo 'echo "üöÄ Assolution Frontend - Production Ready"' >> /app/verify.sh && \
    echo 'echo "üìÖ Built on: $(date)"' >> /app/verify.sh && \
    echo 'echo "üìä Files: $(find /app/dist -type f | wc -l)"' >> /app/verify.sh && \
    echo 'echo "üìä Size: $(du -sh /app/dist | cut -f1)"' >> /app/verify.sh && \
    echo 'echo "üìÅ Directory contents:"' >> /app/verify.sh && \
    echo 'ls -la /app/dist/' >> /app/verify.sh && \
    echo 'echo "‚úÖ Frontend static files ready for Nginx"' >> /app/verify.sh && \
    echo 'tail -f /dev/null' >> /app/verify.sh && \
    chmod +x /app/verify.sh

WORKDIR /app/dist
ENTRYPOINT ["/app/verify.sh"]