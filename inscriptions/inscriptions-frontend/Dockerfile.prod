# Multi-stage build pour Production
FROM node:22-alpine AS builder

# M√©tadonn√©es pour le stage de build
LABEL stage="builder"

# Variables d'environnement pour le build
ENV NODE_ENV=production
ENV NG_CLI_ANALYTICS=false

# Installation des outils de build
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++

# Installation d'Angular CLI
RUN npm install -g @angular/cli@20

WORKDIR /build

# Copie des fichiers de d√©pendances
COPY package*.json ./

# Installation des d√©pendances
RUN npm ci --only=production=false

# Copie du code source
COPY . .

# Build de production
RUN ng build --configuration=production

# Stage de production avec Nginx
FROM nginx:1.25-alpine

# M√©tadonn√©es
LABEL maintainer="Assolution Team"
LABEL version="1.0"
LABEL description="Assolution Frontend - Production"
LABEL stage="production"

# Installation des outils essentiels
RUN apk add --no-cache \
    curl \
    bash \
    tini

# Variables d'environnement
ENV NGINX_USER=nginx
ENV NGINX_WORKER_PROCESSES=auto
ENV NGINX_WORKER_CONNECTIONS=1024

# Suppression de la configuration Nginx par d√©faut
RUN rm -rf /usr/share/nginx/html/* && \
    rm /etc/nginx/conf.d/default.conf

# Copie des fichiers build√©s depuis le stage builder
COPY --from=builder /build/dist/inscriptions-frontend/ /usr/share/nginx/html/

# Configuration Nginx optimis√©e pour Angular
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Gestion des assets avec cache long
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        try_files \$uri =404;
    }

    # Gestion de l'application Angular (SPA)
    location / {
        try_files \$uri \$uri/ /index.html;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' http://192.168.1.22;" always;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
}
EOF

# Configuration Nginx principale optimis√©e
COPY <<EOF /etc/nginx/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Security
    server_tokens off;
    
    # Compression
    gzip on;
    gzip_disable "msie6";

    include /etc/nginx/conf.d/*.conf;
}
EOF

# Script de d√©marrage
COPY <<EOF /app/start-frontend.sh
#!/bin/bash
set -euo pipefail

echo "üé® Starting Assolution Frontend (Production)"
echo "üåê Nginx Version: \$(nginx -v 2>&1)"
echo "üìÅ Serving files from: /usr/share/nginx/html"

# V√©rification des fichiers
if [ ! -f "/usr/share/nginx/html/index.html" ]; then
    echo "‚ùå No index.html found!"
    exit 1
fi

echo "üìä Available files:"
ls -la /usr/share/nginx/html/

# Test de la configuration Nginx
nginx -t

echo "üöÄ Starting Nginx..."
exec nginx -g 'daemon off;'
EOF

RUN chmod +x /app/start-frontend.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:80/health || exit 1

# Port expos√©
EXPOSE 80

# Point d'entr√©e avec tini
ENTRYPOINT ["tini", "--", "/app/start-frontend.sh"]