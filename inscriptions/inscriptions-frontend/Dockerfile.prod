# Multi-stage build pour Production - Assolution Frontend
FROM node:22-alpine AS builder

# Variables d'environnement pour le build
ENV NODE_ENV=development
ENV NG_CLI_ANALYTICS=false

# Installation des outils de build + envsubst pour substitution de variables
RUN apk add --no-cache git python3 make g++ curl bash gettext

WORKDIR /build

# Copie des fichiers de d√©pendances
COPY package*.json ./

# Installation des d√©pendances
RUN rm -rf node_modules package-lock.json && \
    npm install && \
    npm install --save-dev @angular/cli@20.1.5 && \
    npm install --save-dev @angular-devkit/build-angular@20.1.5 && \
    npm install --save-dev @angular/compiler-cli@20.1.6 && \
    npm install --save-dev typescript@5.6.0

# ‚úÖ COPIE DU TEMPLATE depuis le contexte de build
COPY config-templates/environment.prod.ts.template /tmp/environment.prod.ts.template

# Copie du code source
COPY . .

# ‚úÖ SUBSTITUTION DES VARIABLES D'ENVIRONNEMENT
RUN echo "üîß Processing environment variables from template..." && \
    if [ -f "/tmp/environment.prod.ts.template" ]; then \
        echo "üìù Substituting variables from config-templates..." && \
        envsubst < /tmp/environment.prod.ts.template > src/environments/environment.prod.ts && \
        echo "‚úÖ Environment file generated from template:" && \
        head -20 src/environments/environment.prod.ts && \
        echo "" && \
        echo "üîç Variables used in template:" && \
        grep -o '\${[^}]*}' /tmp/environment.prod.ts.template | sort | uniq; \
    elif [ ! -f "src/environments/environment.prod.ts" ]; then \
        echo "üìù Creating default environment.prod.ts..." && \
        cat > src/environments/environment.prod.ts << 'EOF'
export const environment = {
  production: true,
  apiUrl: '/api'
};
EOF
    else \
        echo "‚úÖ environment.prod.ts already exists"; \
    fi

# ‚úÖ BUILD
RUN echo "üéØ Building application..." && \
    npx ng build --configuration=production --output-hashing=all && \
    echo "‚úÖ Build completed!"

# Diagnostic de la structure de build
RUN echo "üîç DIAGNOSTIC BUILD STRUCTURE:" && \
    echo "üìÅ Contents of /build/dist:" && \
    ls -la /build/dist/ 2>/dev/null || echo "No dist directory" && \
    echo "üìÅ Looking for index.html:" && \
    find /build -name "index.html" -type f

# Copie intelligente des fichiers
RUN mkdir -p /build/final_dist && \
    if [ -f "/build/dist/inscriptions-frontend/browser/index.html" ]; then \
        echo "‚úÖ Found Angular files in browser subdirectory" && \
        cp -r /build/dist/inscriptions-frontend/browser/* /build/final_dist/; \
    elif [ -f "/build/dist/inscriptions-frontend/index.html" ]; then \
        echo "‚úÖ Found Angular files in project subdirectory" && \
        cp -r /build/dist/inscriptions-frontend/* /build/final_dist/; \
    elif [ -f "/build/dist/browser/index.html" ]; then \
        echo "‚úÖ Found Angular files in browser directory" && \
        cp -r /build/dist/browser/* /build/final_dist/; \
    elif [ -f "/build/dist/index.html" ]; then \
        echo "‚úÖ Found Angular files in root dist" && \
        cp -r /build/dist/* /build/final_dist/; \
    else \
        echo "‚ùå No index.html found! Copying all dist content..." && \
        cp -r /build/dist/* /build/final_dist/ 2>/dev/null || true; \
    fi && \
    echo "üìä Final dist file count: $(find /build/final_dist -type f | wc -l)"

# Stage final
FROM alpine:3.19 AS production

RUN apk add --no-cache curl bash && \
    rm -rf /var/cache/apk/* && \
    mkdir -p /app/dist

# Copie des fichiers build√©s
COPY --from=builder /build/final_dist/ /app/dist/

# Script de v√©rification
RUN echo '#!/bin/bash' > /app/verify.sh && \
    echo 'echo "üìÅ Assolution Frontend - Static Files Ready"' >> /app/verify.sh && \
    echo 'echo "üìä Files: $(find /app/dist -type f | wc -l)"' >> /app/verify.sh && \
    echo 'echo "üìä Size: $(du -sh /app/dist | cut -f1)"' >> /app/verify.sh && \
    echo 'ls -la /app/dist/' >> /app/verify.sh && \
    echo 'tail -f /dev/null' >> /app/verify.sh && \
    chmod +x /app/verify.sh

WORKDIR /app/dist
ENTRYPOINT ["/app/verify.sh"]