# Multi-stage build pour Production - Assolution Frontend
FROM node:22-alpine AS builder

# M√©tadonn√©es
LABEL maintainer="Assolution Team"
LABEL version="1.0"
LABEL description="Assolution Frontend - Production Build"

# Variables d'environnement pour le build
ENV NODE_ENV=production
ENV NG_CLI_ANALYTICS=false

# Installation des outils de build
RUN apk add --no-cache git python3 make g++ curl bash

# Installation d'Angular CLI
RUN npm install -g @angular/cli@20

WORKDIR /build

# Copie des fichiers de d√©pendances
COPY package*.json ./
RUN npm ci --include=dev && npm cache clean --force

# Copie du code source
COPY . .

# Build de production avec optimisations
RUN ng build --configuration=production --output-hashing=all

# Diagnostic intelligent de la structure de build
RUN echo "üîç DIAGNOSTIC BUILD STRUCTURE:" && \
    echo "üìÅ Contents of /build:" && \
    ls -la /build/ && \
    echo "üìÅ Contents of /build/dist:" && \
    ls -la /build/dist/ 2>/dev/null || echo "No dist directory" && \
    echo "üìÅ Looking for index.html:" && \
    find /build -name "index.html" -type f && \
    echo "üìÅ Built files structure:" && \
    find /build/dist -type f 2>/dev/null | head -20 || echo "No built files found"

# Copie intelligente des fichiers - teste plusieurs emplacements d'Angular 20
RUN mkdir -p /build/final_dist && \
    if [ -f "/build/dist/inscriptions-frontend/browser/index.html" ]; then \
        echo "‚úÖ Found Angular 20 hybrid mode files in /build/dist/inscriptions-frontend/browser/" && \
        cp -r /build/dist/inscriptions-frontend/browser/* /build/final_dist/; \
    elif [ -f "/build/dist/inscriptions-frontend/index.html" ]; then \
        echo "‚úÖ Found Angular files in /build/dist/inscriptions-frontend/" && \
        cp -r /build/dist/inscriptions-frontend/* /build/final_dist/; \
    elif [ -f "/build/dist/browser/index.html" ]; then \
        echo "‚úÖ Found Angular 20 browser files in /build/dist/browser/" && \
        cp -r /build/dist/browser/* /build/final_dist/; \
    elif [ -f "/build/dist/index.html" ]; then \
        echo "‚úÖ Found Angular files in /build/dist/" && \
        cp -r /build/dist/* /build/final_dist/; \
    else \
        echo "‚ùå No index.html found anywhere!" && \
        echo "üìã Full directory structure:" && \
        find /build -type f -name "*.html" && \
        exit 1; \
    fi && \
    echo "üìä Final dist contents:" && \
    ls -la /build/final_dist/ && \
    echo "üìä Final dist size:" && \
    du -sh /build/final_dist/

# Stage de production avec Nginx optimis√©
FROM nginx:1.25-alpine AS production

# M√©tadonn√©es
LABEL maintainer="Assolution Team"
LABEL version="1.0"
LABEL description="Assolution Frontend - Production"

# Installation des outils essentiels
RUN apk add --no-cache curl bash tini && \
    rm -rf /var/cache/apk/*

# Suppression de la configuration Nginx par d√©faut
RUN rm -rf /usr/share/nginx/html/* && \
    rm -f /etc/nginx/conf.d/default.conf

# Copie des fichiers build√©s depuis le stage builder
COPY --from=builder /build/final_dist/ /usr/share/nginx/html/

# Configuration Nginx optimis√©e pour Angular SPA
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Logs avec format d√©taill√©
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "frontend healthy\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache";
    }

    # Assets statiques avec cache agressif
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
        
        # Compression sp√©cifique pour assets
        gzip_static on;
    }

    # Fichiers de manifeste et service workers
    location ~* \.(webmanifest|manifest\.json|sw\.js)$ {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # Gestion SPA - toutes les routes vers index.html
    location / {
        try_files $uri $uri/ /index.html;
        
        # Pas de cache pour index.html
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # Headers de s√©curit√©
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }

    # Gestion des erreurs
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Compression globale
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # S√©curit√© suppl√©mentaire
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

# Configuration Nginx principale optimis√©e
RUN cat > /etc/nginx/nginx.conf << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimisations syst√®me
worker_rlimit_nofile 65535;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Format de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Optimisations de performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Buffers optimis√©s
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;

    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_requests 100;
    send_timeout 10;

    # Compression par d√©faut
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    include /etc/nginx/conf.d/*.conf;
}
EOF

# Script de d√©marrage avec v√©rifications robustes
RUN cat > /app/start-frontend.sh << 'EOF'
#!/bin/bash
set -euo pipefail

echo "üé® Starting Assolution Frontend (Production)"
echo "üåê Nginx Version: $(nginx -v 2>&1)"
echo "üìÅ Serving files from: /usr/share/nginx/html"
echo "üè∑Ô∏è  Container: $(hostname)"

# V√©rification CRITIQUE des fichiers
if [ ! -f "/usr/share/nginx/html/index.html" ]; then
    echo "‚ùå CRITICAL: No index.html found!"
    echo "üìã Contents of /usr/share/nginx/html:"
    ls -la /usr/share/nginx/html/ || echo "Directory not accessible"
    echo "üìã Looking for HTML files:"
    find /usr/share/nginx/html -name "*.html" -type f || echo "No HTML files found"
    exit 1
fi

echo "‚úÖ index.html found!"
echo "üìä Available files (first 10):"
ls -la /usr/share/nginx/html/ | head -10

# V√©rification de la taille des fichiers critiques
INDEX_SIZE=$(stat -c%s "/usr/share/nginx/html/index.html" 2>/dev/null || echo "0")
if [ "$INDEX_SIZE" -lt 100 ]; then
    echo "‚ö†Ô∏è  WARNING: index.html seems too small ($INDEX_SIZE bytes)"
fi

# Test de la configuration Nginx
echo "üîß Testing Nginx configuration..."
nginx -t || {
    echo "‚ùå Nginx configuration test failed!"
    echo "üìã Configuration files:"
    find /etc/nginx -name "*.conf" -exec echo "--- {} ---" \; -exec cat {} \;
    exit 1
}

echo "‚úÖ Nginx configuration OK"

# Information sur l'environnement
echo "üìä System Information:"
echo "   - OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
echo "   - Memory: $(free -m | awk 'NR==2{printf "%.1fMB (%.1f%% used)", $3,$3*100/$2 }')"
echo "   - Disk: $(df -h /usr/share/nginx/html | awk 'NR==2{print $3"/"$2" ("$5" used)"}')"

echo "üöÄ Starting Nginx..."
exec nginx -g 'daemon off;'
EOF

RUN chmod +x /app/start-frontend.sh

# Cr√©ation des r√©pertoires n√©cessaires
RUN mkdir -p /var/cache/nginx /var/log/nginx && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx

# Health check optimis√©
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:80/health || exit 1

# Exposition du port
EXPOSE 80

# Utilisation de tini pour un signal handling propre
ENTRYPOINT ["tini", "--", "/app/start-frontend.sh"]