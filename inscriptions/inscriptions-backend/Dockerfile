# inscriptions/inscriptions-backend/Dockerfile (Development)

# Backend Dockerfile pour Development
FROM eclipse-temurin:21-jdk as builder

# M√©tadonn√©es
LABEL maintainer="Assolution Team"
LABEL version="1.0"
LABEL description="Assolution Backend - Development"

# Variables d'environnement
ENV JAVA_HOME=/usr/local/openjdk-21
ENV SPRING_PROFILES_ACTIVE=dev
ENV SERVER_PORT=8080

# Installation des outils n√©cessaires
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Cr√©ation du r√©pertoire de travail
WORKDIR /app

# Copie du fichier Maven wrapper et pom.xml pour cache des d√©pendances
COPY .mvn/ .mvn/
COPY mvnw pom.xml ./
RUN chmod +x mvnw

# T√©l√©chargement des d√©pendances (mise en cache Docker)
RUN ./mvnw dependency:go-offline -B

# Copie du code source
COPY src/ ./src/

# Construction de l'application
RUN ./mvnw clean package -DskipTests

# Cr√©ation d'un utilisateur non-root
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# Port expos√©
EXPOSE 8080

# Script de d√©marrage avec health check
COPY --chown=appuser:appuser <<EOF /app/start.sh
#!/bin/bash
set -e

echo "üöÄ Starting Assolution Backend (Development)"
echo "üìä Java Version: \$(java -version 2>&1 | head -n 1)"
echo "üîß Active Profile: \${SPRING_PROFILES_ACTIVE}"
echo "üíæ Database Host: \${DB_HOST}"

# Attendre que la base de donn√©es soit pr√™te
echo "‚è≥ Waiting for database..."
while ! nc -z \${DB_HOST:-postgres} \${DB_PORT:-5432}; do
  sleep 1
done
echo "‚úÖ Database is ready!"

# D√©marrer l'application
exec java \
  -Djava.security.egd=file:/dev/./urandom \
  -Dspring.profiles.active=\${SPRING_PROFILES_ACTIVE:-dev} \
  -jar target/*.jar
EOF

RUN chmod +x /app/start.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

# Point d'entr√©e
ENTRYPOINT ["/app/start.sh"]