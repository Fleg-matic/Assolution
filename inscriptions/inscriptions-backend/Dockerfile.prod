# Dockerfile.prod pour le backend Spring Boot - Version optimis√©e pour d√©marrage rapide
FROM maven:3.9.6-eclipse-temurin-21 AS builder

WORKDIR /build

# Copier le r√©pertoire config-templates et les fichiers de build
COPY config-templates/ ../config-templates/
COPY inscriptions/inscriptions-backend/pom.xml .
COPY inscriptions/inscriptions-backend/src ./src

# V√©rifier la structure du projet
RUN echo "üîç Project structure:" && \
    ls -la . && \
    echo "üìÑ Maven version:" && \
    mvn --version

# ‚úÖ UTILISER LE TEMPLATE EXISTANT
RUN echo "üìã Generating application-prod.properties from template..." && \
    if [ -f "../config-templates/application-prod.properties.template" ]; then \
        echo "‚úÖ Template found, copying to resources..." && \
        cp ../config-templates/application-prod.properties.template src/main/resources/application-prod.properties && \
        echo "üìä Template copied successfully"; \
    else \
        echo "‚ùå Template not found at ../config-templates/application-prod.properties.template"; \
        echo "üîç Available files in config-templates:"; \
        ls -la ../config-templates/ || echo "config-templates directory not found"; \
        exit 1; \
    fi

# ‚úÖ BUILD OPTIMIS√â - compilation en parall√®le et sans tests
RUN echo "üî® Building with Maven (optimized)..." && \
    mvn clean package -DskipTests -T 1C --batch-mode --no-transfer-progress

# Trouver et copier le JAR
RUN echo "üì¶ Checking build artifacts:" && \
    ls -la target/ && \
    JAR_FILE=$(find target/ -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1) && \
    echo "‚úÖ Found JAR: $JAR_FILE" && \
    cp "$JAR_FILE" /build/app.jar && \
    ls -la /build/app.jar

# Stage final de production - image optimis√©e
FROM eclipse-temurin:21-jre-jammy

# ‚úÖ CONFIGURER MIROIR ALTERNATIF AVANT INSTALLATION
RUN echo "deb http://fr.archive.ubuntu.com/ubuntu/ jammy main restricted" > /etc/apt/sources.list && \
    echo "deb http://fr.archive.ubuntu.com/ubuntu/ jammy-updates main restricted" >> /etc/apt/sources.list && \
    echo "deb http://fr.archive.ubuntu.com/ubuntu/ jammy universe" >> /etc/apt/sources.list && \
    echo "deb http://fr.archive.ubuntu.com/ubuntu/ jammy-updates universe" >> /etc/apt/sources.list && \
    echo "deb http://fr.archive.ubuntu.com/ubuntu/ jammy multiverse" >> /etc/apt/sources.list && \
    echo "deb http://fr.archive.ubuntu.com/ubuntu/ jammy-updates multiverse" >> /etc/apt/sources.list && \
    echo "deb http://fr.archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse" >> /etc/apt/sources.list && \
    echo "deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted" >> /etc/apt/sources.list && \
    echo "deb http://security.ubuntu.com/ubuntu/ jammy-security universe" >> /etc/apt/sources.list && \
    echo "deb http://security.ubuntu.com/ubuntu/ jammy-security multiverse" >> /etc/apt/sources.list

# ‚úÖ INSTALLER SEULEMENT LES OUTILS ESSENTIELS - AVEC RETRY ET TIMEOUT
RUN for i in 1 2 3; do \
        echo "üîÑ Attempt $i/3 to install packages..." && \
        apt-get update --fix-missing -o Acquire::Retries=3 -o Acquire::http::Timeout=30 && \
        apt-get install -y --no-install-recommends --fix-missing \
            tini curl netcat-openbsd && \
        rm -rf /var/lib/apt/lists/* && \
        apt-get clean && \
        echo "‚úÖ Packages installed successfully" && break || \
        (echo "‚ùå Attempt $i failed, retrying in 15 seconds..." && sleep 15); \
    done && \
    if ! command -v curl >/dev/null 2>&1; then \
        echo "‚ùå Installation failed after 3 attempts" && exit 1; \
    fi

# Cr√©er utilisateur non-root
RUN groupadd -g 1001 appuser && \
    useradd -r -u 1001 -g appuser appuser

# Cr√©er r√©pertoires avec les bonnes permissions
WORKDIR /app
RUN mkdir -p /app/logs && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app && \
    chmod -R 777 /app/logs

# Copier le JAR avec les bonnes permissions
COPY --from=builder --chown=appuser:appuser /build/app.jar /app/app.jar

# ‚úÖ SCRIPT OPTIMIS√â POUR D√âMARRAGE RAPIDE
COPY --chown=appuser:appuser <<EOF /app/start-prod.sh
#!/bin/bash
set -e

echo "üè≠ Starting Assolution Backend (Production) - Optimized"
echo "üìä Java Version: \$(java -version 2>&1 | head -1)"
echo "üîß Active Profile: \${SPRING_PROFILES_ACTIVE:-prod}"
echo "üíæ Database Host: \${DB_HOST:-postgres}"
echo "üöÄ JVM Options: \${JAVA_OPTS}"

# ‚úÖ VARIABLES V√âRIFI√âES - COH√âRENTES AVEC DOCKER-COMPOSE
echo "üîç Checking environment variables:"
echo "DB_HOST: \${DB_HOST:-NOT_SET}"
echo "DB_USER: \${DB_USER:-NOT_SET}"
echo "DB_PASSWORD: \${DB_PASSWORD:+SET}"
echo "JWT_SECRET: \${JWT_SECRET:+SET}"
echo "EMAIL_HOST_PROD: \${EMAIL_HOST_PROD:-NOT_SET}"

if [ -z "\$DB_HOST" ] || [ -z "\$DB_USER" ] || [ -z "\$DB_PASSWORD" ]; then
    echo "‚ùå Missing required database environment variables"
    echo "Required: DB_HOST, DB_USER, DB_PASSWORD"
    echo "üîç Current values:"
    echo "  DB_HOST=\${DB_HOST:-EMPTY}"
    echo "  DB_USER=\${DB_USER:-EMPTY}" 
    echo "  DB_PASSWORD=\${DB_PASSWORD:+SET}"
    exit 1
fi

# ‚úÖ ATTENTE DB OPTIMIS√âE - parall√®le et plus rapide
echo "‚è≥ Waiting for database connection (optimized)..."
TIMEOUT=30
COUNT=0

# Test de connexion avec timeout plus court
while ! timeout 3 nc -z \${DB_HOST} \${DB_PORT:-5432} 2>/dev/null; do 
    COUNT=\$((COUNT + 1))
    if [ \$COUNT -gt \$TIMEOUT ]; then
        echo "‚ùå Database connection timeout after \${TIMEOUT} seconds"
        echo "üîç Testing connectivity:"
        echo "  Host: \${DB_HOST}"
        echo "  Port: \${DB_PORT:-5432}"
        exit 1
    fi
    echo "Attempt \$COUNT/\$TIMEOUT - waiting for \${DB_HOST}:\${DB_PORT:-5432}..."
    sleep 1
done
echo "‚úÖ Database connection established in \${COUNT} seconds!"

# ‚úÖ OPTIMISATIONS JVM POUR D√âMARRAGE RAPIDE - COMPATIBLES JAVA 21
export JAVA_OPTS="\${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom"
export JAVA_OPTS="\${JAVA_OPTS} -Djava.awt.headless=true"
export JAVA_OPTS="\${JAVA_OPTS} -Dfile.encoding=UTF-8"
export JAVA_OPTS="\${JAVA_OPTS} -Duser.timezone=Europe/Paris"

# ‚úÖ PR√âPARATION RAPIDE DU SYST√àME
# Cr√©er les r√©pertoires n√©cessaires
mkdir -p /tmp/spring-boot
chmod 777 /tmp/spring-boot

# D√©marrer l'application Spring Boot avec optimisations
echo "üöÄ Starting Spring Boot application (fast startup)..."
echo "üìä Memory: \$(free -h | head -2)"
echo "üíΩ Disk: \$(df -h / | tail -1)"

exec java \${JAVA_OPTS:-"-Xmx512m -Xms512m"} \\
    -Djava.security.egd=file:/dev/./urandom \\
    -Djava.awt.headless=true \\
    -Dspring.profiles.active=\${SPRING_PROFILES_ACTIVE:-prod} \\
    -Dserver.port=\${SERVER_PORT:-8080} \\
    -Dspring.main.lazy-initialization=false \\
    -Dspring.jmx.enabled=false \\
    -Djava.io.tmpdir=/tmp/spring-boot \\
    -jar /app/app.jar
EOF

RUN chmod +x /app/start-prod.sh

# Utiliser l'utilisateur non-root
USER appuser

# Exposer le port
EXPOSE 8080

# ‚úÖ HEALTHCHECK OPTIMIS√â
HEALTHCHECK --interval=15s --timeout=8s --start-period=45s --retries=5 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# Point d'entr√©e
ENTRYPOINT ["tini", "--", "/app/start-prod.sh"]