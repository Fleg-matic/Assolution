# Dockerfile.prod pour le backend Spring Boot - Version corrigée
FROM maven:3.9.6-eclipse-temurin-21 AS builder

WORKDIR /build

# Copier les fichiers de build
COPY pom.xml .
COPY src ./src

# Vérifier la structure du projet
RUN echo "📁 Project structure:" && \
    ls -la . && \
    echo "📄 Maven version:" && \
    mvn --version

# Générer le fichier application-prod.properties depuis le template
RUN echo "📋 Generating application-prod.properties from template..." && \
    if [ -f "../../config-templates/application-prod.properties.template" ]; then \
        echo "✅ Template found, copying to resources..." && \
        cp ../../config-templates/application-prod.properties.template src/main/resources/application-prod.properties; \
    else \
        echo "❌ Template not found at ../../config-templates/application-prod.properties.template"; \
        echo "📁 Available files in config-templates:"; \
        ls -la ../../config-templates/ || echo "Directory not found"; \
        exit 1; \
    fi

# Build de l'application
RUN echo "🔨 Building with Maven..." && \
    mvn clean package -DskipTests

# Trouver et copier le JAR
RUN echo "📦 Checking build artifacts:" && \
    ls -la target/ && \
    JAR_FILE=$(find target/ -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1) && \
    echo "✅ Found JAR: $JAR_FILE" && \
    cp "$JAR_FILE" /build/app.jar && \
    ls -la /build/app.jar

# Stage final de production
FROM eclipse-temurin:21-jre-jammy

# Installer les outils nécessaires
RUN apt-get update && \
    apt-get install -y tini curl netcat-openbsd && \
    rm -rf /var/lib/apt/lists/*

# Créer utilisateur non-root
RUN groupadd -g 1001 appuser && \
    useradd -r -u 1001 -g appuser appuser

# Créer répertoires avec les bonnes permissions
WORKDIR /app
RUN mkdir -p /app/logs && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Copier le JAR avec les bonnes permissions
COPY --from=builder --chown=appuser:appuser /build/app.jar /app/app.jar

# Créer le script de démarrage amélioré
RUN cat > /app/start-prod.sh << 'EOF'
#!/bin/bash
set -e

echo "🏭 Starting Assolution Backend (Production)"
echo "📊 Java Version: $(java -version 2>&1 | head -1)"
echo "🔧 Active Profile: ${SPRING_PROFILES_ACTIVE:-prod}"
echo "💾 Database Host: ${DB_HOST:-postgres}"
echo "🚀 JVM Options: ${JAVA_OPTS}"

# Vérifier les variables d'environnement critiques
if [ -z "$DB_HOST" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ]; then
    echo "❌ Missing required database environment variables"
    echo "Required: DB_HOST, DB_USER, DB_PASSWORD"
    exit 1
fi

# Attendre la base de données avec timeout
echo "⏳ Waiting for database connection..."
TIMEOUT=60
COUNT=0
while ! nc -z ${DB_HOST} ${DB_PORT:-5432}; do 
    COUNT=$((COUNT + 1))
    if [ $COUNT -gt $TIMEOUT ]; then
        echo "❌ Database connection timeout after ${TIMEOUT} seconds"
        exit 1
    fi
    echo "Attempt $COUNT/$TIMEOUT - waiting for ${DB_HOST}:${DB_PORT:-5432}..."
    sleep 1
done
echo "✅ Database connection established!"

# Vérifier que le port n'est pas déjà utilisé
PORT=${SERVER_PORT:-8080}
if netstat -tuln 2>/dev/null | grep -q ":$PORT "; then
    echo "❌ Port $PORT is already in use. Trying to find available port..."
    # Optionnel: essayer de trouver un port libre
    for i in {8081..8090}; do
        if ! netstat -tuln 2>/dev/null | grep -q ":$i "; then
            PORT=$i
            echo "✅ Using available port: $PORT"
            export SERVER_PORT=$PORT
            break
        fi
    done
fi

# Démarrer l'application Spring Boot
echo "🚀 Starting Spring Boot application on port $PORT..."
exec java ${JAVA_OPTS:-"-Xmx1g -Xms512m"} \
    -Djava.security.egd=file:/dev/./urandom \
    -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE:-prod} \
    -Dserver.port=${SERVER_PORT:-8080} \
    -Dlogging.file.path=/app/logs \
    -jar /app/app.jar
EOF

RUN chmod +x /app/start-prod.sh && \
    chown appuser:appuser /app/start-prod.sh

# Utiliser l'utilisateur non-root
USER appuser

# Exposer le port (configurable)
EXPOSE ${SERVER_PORT:-8080}

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${SERVER_PORT:-8080}/actuator/health || exit 1

# Point d'entrée
ENTRYPOINT ["tini", "--", "/app/start-prod.sh"]