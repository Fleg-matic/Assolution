# inscriptions/inscriptions-backend/Dockerfile.prod (Production)

# Multi-stage build pour Production
FROM eclipse-temurin:21-jdk as builder

# Installation de Maven
RUN apt-get update && apt-get install -y maven && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copie des fichiers de configuration Maven
COPY pom.xml .
COPY .mvn/ .mvn/
COPY mvnw .
RUN chmod +x mvnw

# T√©l√©chargement des d√©pendances
RUN ./mvnw dependency:go-offline -B

# Copie du code source et build
COPY src/ ./src/
RUN ./mvnw clean package -DskipTests -Dmaven.test.skip=true

# Stage de production
FROM eclipse-temurin:21-jre-jammy

# M√©tadonn√©es
LABEL maintainer="Assolution Team"
LABEL version="1.0"
LABEL description="Assolution Backend - Production"
LABEL stage="production"

# Installation des outils essentiels seulement
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    netcat-traditional \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Variables d'environnement optimis√©es pour la production
ENV JAVA_HOME=/usr/local/openjdk-21
ENV SPRING_PROFILES_ACTIVE=prod
ENV SERVER_PORT=8080
ENV JAVA_OPTS="-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+OptimizeStringConcat"

# Cr√©ation d'un utilisateur non-root
RUN groupadd -r appuser && useradd -r -g appuser -d /app -s /bin/false appuser

# R√©pertoire de travail
WORKDIR /app

# Copie du JAR depuis le builder
COPY --from=builder --chown=appuser:appuser /build/target/assolution-backend.jar app.jar

# Cr√©ation des r√©pertoires de logs
RUN mkdir -p /app/logs && chown -R appuser:appuser /app

# Script de d√©marrage optimis√© pour la production
COPY --chown=appuser:appuser <<EOF /app/start-prod.sh
#!/bin/bash
set -euo pipefail

echo "üè≠ Starting Assolution Backend (Production)"
echo "üìä Java Version: \$(java -version 2>&1 | head -1)"
echo "üîß Active Profile: \${SPRING_PROFILES_ACTIVE:-prod}"
echo "üíæ Database Host: \${DB_HOST:-localhost}"
echo "üöÄ JVM Options: \${JAVA_OPTS}"

# V√©rification des variables d'environnement critiques
: \${DB_HOST:?DB_HOST is required}
: \${DB_PASSWORD:?DB_PASSWORD is required}
: \${JWT_SECRET:?JWT_SECRET is required}

# Attendre que la base de donn√©es soit pr√™te (avec timeout)
echo "‚è≥ Waiting for database connection..."
timeout=60
counter=0
while ! nc -z \${DB_HOST:-postgres} \${DB_PORT:-5432}; do
    if [ \$counter -ge \$timeout ]; then
        echo "‚ùå Database connection timeout after \$timeout seconds"
        exit 1
    fi
    counter=\$((counter + 1))
    sleep 1
done
echo "‚úÖ Database connection established!"

# Pr√©-v√©rification du JAR
if [ ! -f "/app/app.jar" ]; then
    echo "‚ùå Application JAR not found!"
    exit 1
fi

echo "üöÄ Starting application..."

# D√©marrage avec optimisations JVM pour production
exec java ${JAVA_OPTS} \
    -Djava.security.egd=file:/dev/./urandom \
    -Dspring.profiles.active=\${SPRING_PROFILES_ACTIVE:-prod} \
    -Dlogging.file.name=/app/logs/application.log \
    -Dlogging.pattern.file="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n" \
    -jar /app/app.jar
EOF

RUN chmod +x /app/start-prod.sh

# Changement vers l'utilisateur non-root
USER appuser

# Port expos√©
EXPOSE 8080

# Health check optimis√©
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

# Point d'entr√©e avec tini pour une gestion propre des signaux
ENTRYPOINT ["tini", "--", "/app/start-prod.sh"]