# Dockerfile.prod pour le backend Spring Boot - Version corrig√©e
FROM maven:3.9.6-eclipse-temurin-21 AS builder

WORKDIR /build

# Copier le r√©pertoire config-templates et les fichiers de build
COPY config-templates/ ../config-templates/
COPY inscriptions/inscriptions-backend/pom.xml .
COPY inscriptions/inscriptions-backend/src ./src

# V√©rifier la structure du projet
RUN echo "üìÅ Project structure:" && \
    ls -la . && \
    echo "üìÑ Maven version:" && \
    mvn --version

# G√©n√©rer le fichier application-prod.properties depuis le template
RUN echo "üìã Generating application-prod.properties from template..." && \
    if [ -f "../config-templates/application-prod.properties.template" ]; then \
        echo "‚úÖ Template found, copying to resources..." && \
        cp ../config-templates/application-prod.properties.template src/main/resources/application-prod.properties; \
    else \
        echo "‚ùå Template not found at ../config-templates/application-prod.properties.template"; \
        echo "üìÅ Available files in root:"; \
        ls -la ../ || echo "Parent directory not found"; \
        echo "üìÅ Looking for config-templates:"; \
        find .. -name "config-templates" -type d 2>/dev/null || echo "config-templates directory not found"; \
        exit 1; \
    fi

# Build de l'application
RUN echo "üî® Building with Maven..." && \
    mvn clean package -DskipTests

# Trouver et copier le JAR
RUN echo "üì¶ Checking build artifacts:" && \
    ls -la target/ && \
    JAR_FILE=$(find target/ -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1) && \
    echo "‚úÖ Found JAR: $JAR_FILE" && \
    cp "$JAR_FILE" /build/app.jar && \
    ls -la /build/app.jar

# Stage final de production
FROM eclipse-temurin:21-jre-jammy

# Installer les outils n√©cessaires
RUN apt-get update && \
    apt-get install -y tini curl netcat-openbsd && \
    rm -rf /var/lib/apt/lists/*

# Cr√©er utilisateur non-root
RUN groupadd -g 1001 appuser && \
    useradd -r -u 1001 -g appuser appuser

# Cr√©er r√©pertoires avec les bonnes permissions
WORKDIR /app
RUN mkdir -p /app/logs && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Copier le JAR avec les bonnes permissions
COPY --from=builder --chown=appuser:appuser /build/app.jar /app/app.jar

# Cr√©er le script de d√©marrage directement
COPY --chown=appuser:appuser <<EOF /app/start-prod.sh
#!/bin/bash
set -e

echo "üè≠ Starting Assolution Backend (Production)"
echo "üìä Java Version: \$(java -version 2>&1 | head -1)"
echo "üîß Active Profile: \${SPRING_PROFILES_ACTIVE:-prod}"
echo "üíæ Database Host: \${DB_HOST:-postgres}"
echo "üöÄ JVM Options: \${JAVA_OPTS}"

# V√©rifier les variables d'environnement critiques
if [ -z "\$DB_HOST" ] || [ -z "\$DB_USER" ] || [ -z "\$DB_PASSWORD" ]; then
    echo "‚ùå Missing required database environment variables"
    echo "Required: DB_HOST, DB_USER, DB_PASSWORD"
    exit 1
fi

# Attendre la base de donn√©es avec timeout
echo "‚è≥ Waiting for database connection..."
TIMEOUT=60
COUNT=0
while ! nc -z \${DB_HOST} \${DB_PORT:-5432}; do 
    COUNT=\$((COUNT + 1))
    if [ \$COUNT -gt \$TIMEOUT ]; then
        echo "‚ùå Database connection timeout after \${TIMEOUT} seconds"
        exit 1
    fi
    echo "Attempt \$COUNT/\$TIMEOUT - waiting for \${DB_HOST}:\${DB_PORT:-5432}..."
    sleep 1
done
echo "‚úÖ Database connection established!"

# D√©marrer l'application Spring Boot
echo "üöÄ Starting Spring Boot application..."
exec java \${JAVA_OPTS:-"-Xmx1g -Xms512m"} \\
    -Djava.security.egd=file:/dev/./urandom \\
    -Dspring.profiles.active=\${SPRING_PROFILES_ACTIVE:-prod} \\
    -Dserver.port=\${SERVER_PORT:-8080} \\
    -Dlogging.file.path=/app/logs \\
    -jar /app/app.jar
EOF

RUN chmod +x /app/start-prod.sh

# Utiliser l'utilisateur non-root
USER appuser

# Exposer le port (configurable)
EXPOSE ${SERVER_PORT:-8080}

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${SERVER_PORT:-8080}/actuator/health || exit 1

# Point d'entr√©e
ENTRYPOINT ["tini", "--", "/app/start-prod.sh"]